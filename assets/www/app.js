/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

// @require @packageOverrides
Ext.Loader.setConfig({

});


Ext.application({

    requires: [
        'Ext.MessageBox'
    ],
    models: [
        'PracticesModel',
        'SkillsForResumeModel',
        'ProfilesForResumeModel',
        'CertificationsForResumeModel',
        'KeywordsModel',
        'SearchProfile',
        'SearchResultSaved',
        'AuthModel',
        'SearchResumeKeywordModel',
        'SearchRequestList',
        'ShortlistRequestList',
        'SavedSearchModel',
        'UserModel',
        'MsgModel',
        'LookupDataModel',
        'Statistics',
        'StatisticsResume',
        'SocialMediaModel',
        'UserDetailSocialMediaModel',
        'StatisticsModel',
        'ResumeExperiencesModel'
    ],
    stores: [
        'ProfilesStore',
        'SkillsStore',
        'CertificateStore',
        'ExperienceStore',
        'ProfilesForResumeStore',
        'SkillsForResumeStore',
        'SearchProfile',
        'SearchResultSaved',
        'SearchResultDetail',
        'AuthStore',
        'SearchSkill',
        'SearchKeyword',
        'SearchCertification',
        'SearchIndustry',
        'SearchLanguage',
        'SearchRequestList',
        'StartDate',
        'ShortlistRequestList',
        'CreateRequestDay',
        'CreateRequestLocation',
        'CreateRequestFeeRange',
        'SavedSearchStore',
        'ShortlistResumeStore',
        'MsgInboxList',
        'MsgDetailList',
        'SavedShortlistStore',
        'resumeCertification',
        'CompanyDetail',
        'UserStore',
        'MessageStore',
        'StatisticsResume',
        'GetLookupDataStore',
        'StatisticsRequest',
        'settingTerms',
        'settingPrivacy',
        'settingNotice',
        'UserDetail',
        'PresentPosition',
        'SocialMediaStore',
        'StatisticsGraph',
        'UserType',
        'ResumeExperiencesStore'
    ],
    views: [
        'LoginForm',
        'SearchResult',
        'Register',
        'StartScreen',
        'SearchResumeDetail',
        'ResumeView',
        'RequestScreen',
        'CreateRequestScreen',
        'SendRequest',
        'SavedSearch',
        'MsgInbox',
        'CompanyDetail',
        'PresentDetail',
        'UserResumeView',
        'StatisticsView',
        'CompanyEdit',
        'PresentEdit',
        'Setting',
        'PresentSocialMedia',
        'SettingDetail',
        'Shortlist',
        'RequestDetail',
        'MyNavigationView',
        'RequestConfirmed'
    ],
    controllers: [
        'Account',
        'G',
        'UserResume',
        'SearchResume',
        'Messages',
        'Requests',
        'Statistics',
        'Shortlist',
        'SaveSearch',
        'Company',
        'Present'
    ],
    name: 'ProDooMobileApp',

    launch: function() {

        Ext.get('preLoader').destroy();
        Ext.Ajax.setTimeout(120000);

        this.override();
        SiteUrl = "http://localhost/EER/";
        ApiBaseUrl = "";
        ActiveScreen = 0;
        UserDetail=null;

        //SocialMediaList=Ext.getStore("SocialMediaStore").load().data.items;
        if(window.location.href.indexOf('localhost')>0)
            ApiBaseUrl= "http://localhost/PRODOO/webapi/api/";
        else if(window.location.href.indexOf('dev')>0)
            ApiBaseUrl= "http://dev.prodoo.dk/webapi/api/";
        else if(window.location.href.indexOf('staging')>0)
            ApiBaseUrl= "http://staging.prodoo.dk/WebAPI/api/";
        else
            ApiBaseUrl= "http://dev.prodoo.dk/WebAPI/api/";

        // setting loading mask on viewport
        Ext.Viewport.setMasked({xtype:'loadmask',message:'loading...'});
        // disabling it by default
        Ext.Viewport.setMasked(false);

        /*var authStore = Ext.getStore('AuthStore');
        if(authStore.data.items.length > 0){ // cookie exists
            var authRec = authStore.getAt(0);
            debugger;
            G.loadCommonLookups();
            G.ShowView('StartScreen');
        }*/

        Ext.Ajax.on('beforerequest', function (conn, response, options) {

         //   if(navigator.onLine){

            if(Ext.Viewport.getMasked() == null || Ext.Viewport.getMasked().isHidden() == true)
            {
                Ext.Viewport.setMasked(true);
            }
         //   }
         //   else {
         //        Ext.Msg.alert('Status', 'Internet connection not available');
         //       return false;
         //   }
        });
        Ext.Ajax.on('requestcomplete', function (conn, response, options) {
            Ext.Viewport.setMasked(false);
        });

        Ext.Ajax.on('requestexception', function (conn, response, options) {
            Ext.Viewport.setMasked(false);

            switch(response.status) {
            case 0 :
              Ext.Msg.alert('Status', 'Internet connection not available');
              break;
          }
        });

        Ext.create('ProDooMobileApp.view.MyNavigationView', {fullscreen: true});
    },

    override: function() {
        Ext.override(Ext.util.SizeMonitor, {
            constructor: function(config) {
                var namespace = Ext.util.sizemonitor;

                if (Ext.browser.is.Firefox) {
                    return new namespace.OverflowChange(config);
                } else if (Ext.browser.is.WebKit) {
                    if (!Ext.browser.is.Silk && Ext.browser.engineVersion.gtEq('535') && !Ext.browser.engineVersion.ltEq('537.36')) {
                        return new namespace.OverflowChange(config);
                    } else {
                        return new namespace.Scroll(config);
                    }
                } else if (Ext.browser.is.IE11) {
                    return new namespace.Scroll(config);
                } else {
                    return new namespace.Scroll(config);
                }
            }
        });


        Ext.override(Ext.util.PaintMonitor, {
            constructor: function(config) {
                if (Ext.browser.is.Firefox || (Ext.browser.is.WebKit && Ext.browser.engineVersion.gtEq('536') && !Ext.browser.engineVersion.ltEq('537.36') && !Ext.os.is.Blackberry)) {
                    return new Ext.util.paintmonitor.OverflowChange(config);
                }
                else {
                    return new Ext.util.paintmonitor.CssAnimation(config);
                }
            }
        });
        Ext.override(Ext.MessageBox, {
            hide:  function() {
                if (this.activeAnimation && this.activeAnimation._onEnd) {
                    this.activeAnimation._onEnd();
                }
                return this.callParent(arguments);
            }
        });
    }

});
