/*
 * File: app/controller/UserResume.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ProDooMobileApp.controller.UserResume', {
    extend: 'Ext.app.Controller',
    alias: 'controller.UserResume',

    alternateClassName: [
        'UserResume'
    ],

    statics: {
        resumePropertySearch: function(textfield) {
            var activeLookup = 'ProfileValue';
            var store = Ext.getStore('SearchProfile');

            // store to apply filter on
            var topBtns = G.get('topButtons');
            var items =  topBtns.items.items;
            var query = textfield.getValue().toLowerCase();
            items.forEach(function(item,index){
                if (item.element.dom.classList.contains('activeBtn'))
                if(index === 0){
                    activeLookup = 'ProfileValue';
                    store = Ext.getStore('SearchProfile');
                }
                else if(index === 1){
                    activeLookup = 'SkillValue';
                    store = Ext.getStore('SearchSkill');
                }
                else  if(index === 2){
                    activeLookup = 'IndustryValue';
                    store = Ext.getStore('SearchIndustry');
                }
                else  if(index === 3){
                    activeLookup = 'KeywordValue';

                }
                else if(index === 4){
                    activeLookup = 'CertificationValue';
                    //store = Ext.getStore('SearchCertification');
                }
                else if(index === 5){
                    activeLookup = 'LanguageValue';
                    store = Ext.getStore('SearchLanguage');
                }
            });

            if(activeLookup === 'KeywordValue'){
                var url = ApiBaseUrl+'Allkeywords/KeywordsLookup';
                if(query!=='')
                url = url + '?filter='+query;
                Ext.Ajax.request({
                    url: url,
                    method: 'Get',
                    headers: { 'Content-Type': 'application/json' },
                    success: function(conn, response, options, eOpts) {
                        var result = Ext.JSON.decode(conn.responseText);
                        if (result.success) {
                            store = Ext.getStore('SearchKeyword');
                            store.setData(result.items);
                            store.sync();
                        } else {
                            G.showGeneralFailure();
                        }
                    },
                    failure: function(conn, response, options, eOpts) {
                        //failure catch
                        G.showGeneralFailure();
                    }
                });

            }
            else if(activeLookup === 'CertificationValue'){
                var url = ApiBaseUrl+'AllCertifications/CertificationsLookup';
                if(query!=='')
                url = url + '?filter='+query;
                Ext.Ajax.request({
                    url: url,
                    method: 'Get',
                    headers: { 'Content-Type': 'application/json' },
                    success: function(conn, response, options, eOpts) {
                        var result = Ext.JSON.decode(conn.responseText);
                        if (result.success) {
                            store = Ext.getStore('SearchCertification');
                            store.setData(result.items);
                            store.sync();
                        } else {
                            G.showGeneralFailure();
                        }
                    },
                    failure: function(conn, response, options, eOpts) {
                        //failure catch
                        G.showGeneralFailure();
                    }
                });

            }
            else{

                store.clearFilter();
                store.filter([
                {
                    fn   : function(record) {
                        return record.get(activeLookup).toLowerCase().startsWith(query);
                    },
                    scope: this
                }
                ]);
            }
        },

        onSearchListItemTap: function(dataview,record,e) {
            var selectedElement =  Ext.get(e.target);
            if(selectedElement.hasCls('listResult') || selectedElement.parent().hasCls('listResult')){
                //G.show('AddSearchBtn');
                //G.show('ClearSearchIcon');
                var searchField = G.get('mysearchfield');
                var recordID = G.get('SearchRecordID');
                dataview.hide();
                var item = UserResume.getActiveBtn();

                if(item===0){// if profile btn active
                    searchField.setValue(record.data.ProfileValue);
                    recordID.setValue(record.data.ProfileId);
                }
                else if(item == 1){// if skill btn active
                    searchField.setValue(record.data.SkillValue);
                    recordID.setValue(record.data.SkillId);
                }
                else if(item == 2){// if Industry btn active
                    searchField.setValue(record.data.IndustryValue);
                    recordID.setValue(record.data.IndustryId);
                }
                else if(item == 3){// if Keyword btn active
                    searchField.setValue(record.data.KeywordValue);
                    recordID.setValue(record.data.KeywordId);
                }
                else if(item == 4){// if certification btn active
                    searchField.setValue(record.data.CertificationValue);
                    recordID.setValue(record.data.CertificationId);
                }
                else if(item == 5){// if language btn active
                    searchField.setValue(record.data.LanguageValue);
                    recordID.setValue(record.data.LanguageId);
                }
                //searchField.setReadOnly(true);
                UserResume.onAddSearchBtnTap();
            }

        },

        getActiveBtn: function() {
            var topBtnItems = G.get('topButtons').innerItems;
            for(var i=0; i< topBtnItems.length; i++){
                if(topBtnItems[i].element.dom.className.indexOf('activeBtn') >= 0){
                    return i;
                }
            }
        },

        hideActive: function(button) {
            var TopCont = G.get('topButtons');
            var items =TopCont.items.items;
            for( var i=0; i<items.length; i++){
                items[i].removeCls('activeBtn');
            }
            button.addCls('activeBtn');
            G.show('searchViewCntID');
            G.get('resultCnt').setMargin('50 0 100');

        },

        onTopBtnTap: function(button,lookupName) {
            G.hide('Confirm');
            var Searchfield = G.get('mysearchfield');
            UserResume.hideActive(button);
            G.hide('CreateCompanyExperience');
            G.hide('CompanyExperienceComfirm');
            if (lookupName == "Industry")
            {
                var loggedUser = Ext.getStore('AuthStore').getAt(0);
                var resumeId = loggedUser.get('ResumeId');

                var expStr = Ext.getStore('ResumeExperiencesStore');
                var expData=Ext.getStore("SearchResultDetail").data.items[0].data.ResumeExperience;
                expStr.setData(expData);

                Searchfield.hide();
                G.hide('searchBtn');
                G.get('buttonsLabel').setHtml('Professional Experience');
                G.show('CreateCompanyExperience');
                G.hide('createCompanyCnt');
                G.show('IndustryList');
            }
            else
            {
                Searchfield.show();
                G.show('searchBtn');
                var storeName = 'Search'+lookupName;
                var placeHolder = 'Enter '+ lookupName.toLowerCase();
                var list = G.get('SearchList');
                var str=Ext.getStore(storeName);
                str.clearFilter();
                list.setStore(storeName);
                list.hide();

                if (lookupName == "Keyword")
                { str.setData(JSON.parse(localStorage.globalKeywords)); }
                else if (lookupName == "Certification")
                { str.setData(JSON.parse(localStorage.globalCertifications)); }
                Searchfield.setPlaceHolder(placeHolder);
                Searchfield.setValue('');
                G.get('buttonsLabel').setHtml(lookupName);
            }

            UserResume.enableDisableItems(lookupName);
            UserResume.scrollToHeading();


        },

        enableDisableItems: function(view) {
            var enaItem;
            UserResume.disableAllItem();
            if(view=="Profile"){
                enaItem = G.get('ProfileCnt');
            }
            else if(view=="Skill"){
                enaItem = G.get('SkillCnt');
            }
            else if(view=="Industry"){
                enaItem = G.get('IndustryCnt');
            }
            else if(view=="Keyword"){
                enaItem = G.get('KeywordCnt');
            }
            else if(view=="Certification"){
                enaItem = G.get('CertificationCnt');
            }
            else if(view ==="Language"){
                enaItem = G.get('LanguageCnt');
            }
            else if(view ==="Setting"){
                enaItem = G.get('SettingCnt');
            }
            enaItem.show();
        },

        scrollToHeading: function() {
            var item = this.getActiveBtn(),
                Cnt;

            if(item===0){// if profile btn active
                Cnt = G.get('ProfileCnt');
            }
            else if(item == 1){// if skill btn active
                Cnt = G.get('SkillCnt');
            }
            else if(item == 2){// if Industry btn active
                Cnt = G.get('IndustryCnt');
            }
            else if(item == 3){// if Keyword btn active
                Cnt = G.get('KeywordCnt');
            }
            else if(item == 4){// if certification btn active
                Cnt = G.get('CertificationCnt');
            }
            else if(item == 5){// if language btn active
                Cnt = G.get('LanguageCnt');
            }
            if(!Cnt.getHidden()){
                //var elementY = Cnt.element.getY() - 250 + this.getScrollable().getScroller().position.y;
                //this.getScrollable().getScroller().scrollTo(0,elementY);
            }
        },

        disableAllItem: function() {
            var CntItems, CntInnerItem;
            CntItems = G.get('resultCnt').innerItems;
            for(var j=0; j<CntItems.length; j++){
                CntInnerItem = CntItems[j].hide();
            }
        },

        clearSearch: function() {
            G.hide('AddSearchBtn');
            G.hide('ClearSearchIcon');
            var searchField = G.get('mysearchfield');
            searchField.setValue('');
            searchField.setReadOnly();
        },

        onAddSearchBtnTap: function() {

            G.hide('AddSearchBtn');
            G.hide('ClearSearchIcon');

            var item = UserResume.getActiveBtn();
            var searchField =  G.get('mysearchfield');
            var value = searchField.getValue();
            var recordID = G.get('SearchRecordID');
            var newCnt;
            var alreadyExist = false;
            var existingRecords = null;

            if(item===0)
            existingRecords = G.get('ProfileCnt').items.items;
            else if(item===1)
            existingRecords = G.get('SkillCnt').items.items;
            else if(item===2)
            existingRecords = G.get('IndustryCnt').items.items;
            if(item===3)
            existingRecords = G.get('KeywordCnt').items.items;
            else if(item===4)
            existingRecords = G.get('CertificationCnt').items.items;
            else if(item===5)
            existingRecords = G.get('LanguageCnt').items.items;

            existingRecords.forEach(function(item,index){
                if(index>1){
                    var tempId = item.items.items[2].getValue();
                    if(recordID.getValue() === tempId)
                    alreadyExist = true;
                }
            });


            if(alreadyExist){
                searchField.setValue('');
                searchField.setReadOnly();
            }
            else {

                // get current logged user
                var loggedUser = Ext.getStore('AuthStore').getAt(0);

                var requestObj = new Object();
                requestObj.ResumeId = loggedUser.get('ResumeId');

                if(item===0){// if profile btn active
                    requestObj.LookupTypeId = 1; // profile lookup type is 1
                    requestObj.ObjectPK = recordID.getValue();
                    newCnt = G.createKeywordView('Profile', value,recordID.getValue(),0);
                    G.show('ProfileCnt');
                }
                else if(item == 1){// if skill btn active

                    requestObj.LookupTypeId = 2; // skill lookup type is 2
                    requestObj.ObjectPK = recordID.getValue();
                    newCnt = G.createKeywordView('Skill', value,recordID.getValue(),0);
                    G.show('SkillCnt');
                }
                else if(item == 2){// if Industry btn active
                    requestObj.LookupTypeId = 4; // industry lookup type is 4
                    requestObj.ObjectPK = recordID.getValue();
                    newCnt = G.createKeywordView('Industry', value, recordID.getValue(),0);
                    G.show('IndustryCnt');
                }
                else if(item == 3){// if Keyword btn active
                    requestObj.LookupTypeId = 3; // keyword lookup type is 3
                    requestObj.ObjectPK = recordID.getValue();
                    newCnt = G.createKeywordView('Keyword', value, recordID.getValue());
                    G.show('KeywordCnt');
                }
                else if(item == 4){// if certification btn active
                    requestObj.LookupTypeId = 5; // certification lookup type is 5
                    requestObj.ObjectPK = recordID.getValue();
                    newCnt = G.createKeywordView('Certification', value, recordID.getValue());
                    G.show('CertificationCnt');
                }
                else if(item == 5){// if language btn active
                    requestObj.LookupTypeId = 6; // certification lookup type is 5
                    requestObj.ObjectPK = recordID.getValue();
                    newCnt = G.createKeywordView('Language', value, recordID.getValue(),0);
                    G.show('LanguageCnt');
                }

                UserResume.scrollIntoView(newCnt);
                searchField.setValue('');
                searchField.setReadOnly();

                Ext.Ajax.request({
                    url : ApiBaseUrl+'resumes/AddResumeDetail',
                    method : 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    params : Ext.JSON.encode(requestObj),
                    success : function (response) {
                        var responseDecode = Ext.decode(response.responseText);
                        if (responseDecode.success) {

                        }
                        else{
                            G.showGeneralFailure();
                        }

                    },
                    failure : function (e) {
                        G.showGeneralFailure();
                    }
                });
            }
        },

        scrollIntoView: function(el) {
            //var elementY = el.element.getY() - 250 + this.getScrollable().getScroller().position.y;
            //this.getScrollable().getScroller().scrollTo(0,elementY);
        },

        onSettingBtnTap: function(button) {
            UserResume.hideActive(button);


            var d=Ext.getStore('SearchResultDetail').getRange();

            UserResume.changeAvailibilityStatus(d[0].data.IsAvailable);

            G.hide('searchViewCntID');
            G.show('Confirm');
            G.get('resultCnt').setMargin('20 0');
            UserResume.enableDisableItems('Setting');

            G.get('buttonsLabel').setHtml('Settings');
        },

        UpdateSettings: function(params, loadResumeView) {
            Ext.Ajax.request({
                url: ApiBaseUrl+'Resumes/SettingsUpdate',
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                params : Ext.JSON.encode(params),
                success: function(conn, response, options, eOpts) {
                    var result = Ext.JSON.decode(conn.responseText);
                    if (result.success) {
                        if(loadResumeView)
                        UserResume.onResumeClick();
                    } else {

                        G.showGeneralFailure();
                    }
                },
                failure: function(conn, response, options, eOpts) {
                    //failure catch
                    G.showGeneralFailure();
                }
            });
        },

        onResumeClick: function() {
            // get current logged user
            var loggedUser = Ext.getStore('AuthStore').getAt(0);
            var resumeId = loggedUser.get('ResumeId');

            Ext.Ajax.request({
                url : ApiBaseUrl+'resumes/getUserResume?resumeId='+resumeId,
                method : 'GET',
                headers: { 'Content-Type': 'application/json' },
                success : function (response) {
                    var responseDecode = Ext.decode(response.responseText);
                    if (responseDecode.success) {
                        var resume = responseDecode.items;
                        if(resume!==null){
                            var store = Ext.getStore('SearchResultDetail');
                            var records = store.getRange();
                            store.remove(records);
                            store.add(resume);
                            store.sync();

                            G.ShowView('UserResumeView');
                        }
                    }
                    else{
                        G.showGeneralFailure();
                    }
                },
                failure : function (e) {
                    G.showGeneralFailure();
                }
            });
        },

        changeAvailibilityStatus: function(available) {
            var button=G.get('availabilityBtn');
            if(available){

                button.removeCls('busyBtn');
                var Cnt = button.up('#availabilityCnt');
                Cnt.removeCls('BusyCnt');
                Cnt.down('#availabilityLbl').setHtml('Available now!');

            }
            else{
                button.addCls('busyBtn');
                var Cnt = button.up('#availabilityCnt');
                Cnt.addCls('BusyCnt');
                Cnt.down('#availabilityLbl').setHtml('Busy');
            }
        },

        ShowCreateResumeExperience: function(record) {
            G.show('createCompanyCnt');
            G.hide('IndustryList');
            G.get('CompanyExperienceComfirm').hide();
            G.show('CompanyExperienceComfirm');
            G.get('HFresumeExperienceId').setValue(0);


            if(record){
                G.get('HFresumeExperienceId').setValue(record.data.ResumeExperienceId);;
                G.get("CreateExpCompanyName").setValue(record.data.CompanyWorked);
                G.get("CreateExpProfile").setValue(record.data.ProfileId);
                G.get("CreateExpStartDate").setValue(new Date(record.data.StartDate));
                G.get("CreateExpEndDate").setValue(new Date(record.data.EndDate));
                G.get("CreateExpDescription").setValue(record.data.Description);
            }
        },

        SaveCompanyExperience: function() {
            var resumeId = Ext.getStore('AuthStore').getAt(0).get('ResumeId');

            var companyNameField=G.get("CreateExpCompanyName");
            var profileField=G.get("CreateExpProfile");
            var StartDateField=G.get("CreateExpStartDate");
            var EndDateField=G.get("CreateExpEndDate");
            var DescriptionField=G.get("CreateExpDescription");

            var companyName=companyNameField.getValue();
            var profile=profileField.getValue();
            var StartDate=StartDateField.getValue();
            var EndDate=EndDateField.getValue();
            var Description=DescriptionField.getValue();

            if(companyName.trim()==null || companyName.trim()=="")
            {
                companyNameField.addCls('isRequired');
                Ext.Msg.alert('',"Unable to save, Company Name is required.");
                return null;
            }

            if(companyName != null && companyName != "" &&  !G.ValidateAlphabet(companyName))
            {
                companyNameField.addCls('isRequired');
                Ext.Msg.alert('',"Unable to save, Company Name is invalid.");
                return null;
            }

            if(profile == null)
            {
                profileField.addCls('isRequired');
                Ext.Msg.alert('',"Unable to save, Profile is required.");
                return null;
            }

            if(StartDate  == null)
            {
                StartDateField.addCls('isRequired');
                Ext.Msg.alert('',"Unable to save, Start Date is required.");
                return null;
            }

            if(EndDate  == null)
            {
                EndDateField.addCls('isRequired');
                Ext.Msg.alert('',"Unable to save, End Date is required.");
                return null;
            }

            if(EndDate < StartDate)
            {
                StartDateField.addCls('isRequired');
                EndDateField.addCls('isRequired');
                Ext.Msg.alert('',"Unable to save, Start Date cannot be greater than end date.");
                return null;
            }

            if(Description.trim()==null || Description.trim()=="")
            {
                DescriptionField.addCls('isRequired');
                Ext.Msg.alert('',"Unable to save, Description is required.");
                return null;
            }

            var model=Ext.create("ProDooMobileApp.model.ResumeExperiencesModel");
            model.data.ResumeExperienceId=G.get('HFresumeExperienceId').getValue();
            model.data.ResumeId=resumeId;
            model.data.CompanyWorked=companyName;
            model.data.ProfileId=profile;
            model.data.StartDate=StartDate;
            model.data.EndDate=EndDate;
            model.data.Description=Description;

            Ext.Ajax.request({
                url: ApiBaseUrl+'ResumeExperiences/AddResumeExperience',
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                params : Ext.JSON.encode(model.data),
                success: function(conn, response, options, eOpts) {
                    var result = Ext.JSON.decode(conn.responseText);
                    if (result.success) {

                        var str=Ext.getStore("ResumeExperiencesStore");
                        model.data.StartDateYear=StartDate.getFullYear();
                        model.data.EndDateYear=EndDate.getFullYear() ;
                        model.data.ProfileValue=profileField.getRecord().data.ProfileValue;
                        if(model.data.ResumeExperienceId==0)
                        str.insert(0,model);
                        else
                        {
                            str.remove(model);
                            str.insert(0,model);
                        }

                        G.hide('createCompanyCnt');
                        G.show('IndustryList');
                        G.get('CompanyExperienceComfirm').hide();
                        G.show('CreateCompanyExperience');
                    } else {
                        G.showGeneralFailure();
                    }

                    companyNameField.setValue('');
                    profileField.setValue('');
                    StartDateField.setValue(new Date());
                    EndDateField.setValue(new Date());
                    DescriptionField.setValue('');
                },
                failure: function(conn, response, options, eOpts) {
                    //failure catch
                    G.showGeneralFailure();
                }
            });
        }
    },

    config: {
    }
});