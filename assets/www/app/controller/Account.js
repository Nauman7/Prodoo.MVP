/*
 * File: app/controller/Account.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ProDooMobileApp.controller.Account', {
    extend: 'Ext.app.Controller',
    alias: 'controller.Account',

    alternateClassName: [
        'Account'
    ],

    statics: {
        authCheck: function() {
            IsVistor=false;
            var authStore = Ext.getStore('AuthStore');
            if(Account.AuthCookieExist() && authStore.data.items.length > 0){ // loggedin record exists

                //SystemLabel.LoadSystemLabel();  //Load all system label to local store
                var authRec = authStore.getAt(0);
                var userFullName = authRec.get('FirstName');
                var authType = authRec.get('AuthType');
                if(authType === 2 )
                {
                    FB.getLoginStatus(function(response) {
                        if (response.status === 'connected') {
                            //G.loadCommonLookups();
                            G.ShowView('StartScreen');
                            G.setLoggedUsername(userFullName);
                        } else if (response.status === 'not_authorized') {
                            authStore.removeAll();
                            authStore.sync();
                            G.ShowView('LoginForm');
                        } else {
                            authStore.removeAll();
                            authStore.sync();
                            G.ShowView('LoginForm');
                        }
                    });
                }
                else if(authType === 1){
                    if(IN.User.isAuthorized()){
                        //G.loadCommonLookups();
                        G.ShowView('StartScreen');
                        G.setLoggedUsername(userFullName);
                    }
                    else{
                        authStore.removeAll();
                        authStore.sync();
                        G.ShowView('LoginForm');
                    }
                }
                else if(authType === 0){
                    //G.loadCommonLookups();
                    G.ShowView('StartScreen');
                    G.setLoggedUsername(userFullName);
                }

            }
            else
            G.ShowView('LoginForm');
        },

        onVisitBtnClick: function() {
            Ext.Ajax.request({
                url: ApiBaseUrl+'Account/Login',
                method: 'POST',
                params : {Email: "visitor@prodoo.eu", Password: "ProdooVisitor", RememberMe: false},
                success: function(response, options) {
                    var result = G.getResponseData(response);
                    if (result.success) {
                        SearchResume.resetStores();
                        IsVistor=true;
                        G.ShowView('SearchResult');
                    } else {
                        G.showGeneralFailure('', response);
                    }
                },
                failure: function(response, options) {
                    G.showGeneralFailure('', response);
                }
            });
        },

        resetPassword: function() {

            var form = G.get('passwordChangeView');
            var values = form.getValues();
            var newPassword=values.NewPassword;
            var confirmPassword=values.ConfirmPassword;
            if(Ext.isEmpty(newPassword) || Ext.isEmpty(confirmPassword))
            {
                Ext.Msg.alert('', 'Please fill all form fields.');
                return;
            }
            if(newPassword!== confirmPassword)
            {
                Ext.Msg.alert('', 'Password does not match');
                return;
            }
            if (confirmPassword.length < 6) {
                Ext.Msg.alert('', 'Password must be at least 6 characters.');
                return;
            }
            var authStore = Ext.getStore('AuthStore');
            var logUserEmail=authStore.data.items[0].data.Email;
            var logUserName=authStore.data.items[0].data.FirstName;

            Ext.Ajax.request({
                url: ApiBaseUrl+'Account/PasswordResetter',
                method: 'GET',
                headers: { 'Content-Type': 'application/json' },
                params : {email: logUserEmail, password: confirmPassword},
                scope: this,
                success: function(response, options) {
                    Ext.Msg.alert('','Your password has been successfully updated.');
                    G.ShowView('StartScreen');
                    G.setLoggedUsername(logUserName);

                },
                failure: function(response, request) {
                    //failure catch
                    G.showGeneralFailure('', response);
                }
            });
        },

        AuthCookieExist: function() {
            var a= '.ASPXAUTH';
            return document.cookie.match('(^|;)\\s*' + a + '\\s*=\\s*([^;]+)');
        }
    },

    config: {
        control: {
            "mainview #showLoginButton": {
                tap: 'showLogin'
            },
            "mainview #showRegisterButton": {
                tap: 'showRegister'
            },
            "passwordfield#mypasswordfield1": {
                keyup: 'onMypasswordfield1Keyup'
            },
            "LoginForm #loginButton": {
                tap: 'login'
            },
            "button#createAccountBtn": {
                tap: 'onCreateAccountBtnTap'
            },
            "button#Logout": {
                tap: 'onLogoutTap'
            }
        }
    },

    showLogin: function(button, e, eOpts) {

        var loginForm = Ext.create('widget.loginform'),	// Login form
            mainView = this.getMainView();				// Main view

        // Navigate to login
        mainView.push({
            xtype: "loginform",
            title: "Login"
        });

    },

    showRegister: function(button, e, eOpts) {

        var registerForm = Ext.create('widget.registerform'),	// Registration form
            mainView = this.getMainView();						// Main view

        // Navigate to register
        mainView.push({
            xtype: "registerform",
            title: "Register"
        });

    },

    onMypasswordfield1Keyup: function(textfield, e, eOpts) {
        if (event.keyCode == 13)
        { this.LoginFunction(); }
    },

    login: function(button, e, eOpts) {
        this.LoginFunction();
    },

    onCreateAccountBtnTap: function(button, e, eOpts) {

        if(button.getText() === 'Forgot Password'){

            var email = G.get('forgetPasswordEmail').getValue();

            if(Ext.isEmpty(email) || !G.ValidateEmail(email))
            {
                Ext.Msg.alert('', 'Please enter valid email.');
                return;
            }

            Ext.Ajax.request({
                url: ApiBaseUrl+'Account/SendEmail?email='+email,
                method: 'GET',
                headers: { 'Content-Type': 'application/json' },
                success: function(conn, response, options, eOpts) {
                    var result = Ext.JSON.decode(conn.responseText);
                    if (result.success) {
                        Ext.Msg.alert('', result.message);
                    } else {
                        Ext.Msg.alert('', result.message);
                    }
                    G.get('forgetPasswordEmail').setValue('');
                },
               failure: function(response, request) {
                    //failure catch
                   G.showGeneralFailure('', response)
                }
            });
        }
        else{

            var form = button.up('formpanel'),			// register form
                values = form.getValues();				// Form values

            if(Ext.isEmpty(values.Name) || Ext.isEmpty(values.Password)
               || Ext.isEmpty(values.Email) || Ext.isEmpty(values.IsFreelancer))
            {
                Ext.Msg.alert('', 'Please fill all form fields.');
                return;
            }

            if(!G.ValidateEmail(values.Email))
            {
                Ext.Msg.alert('', 'Please enter valid email address');
                return;
            }

            // Minimum 6 char required as password
            if (values.Password.length < 6) {
                Ext.Msg.alert('', 'Password must be at least 6 characters.');
                return;
            }

            // preparing model for registration
            var model = values;
            model.ConfirmPassword = values.Password;
            model.ConfirmEmail = values.Email;
            model.IsFreelancer=values.IsFreelancer;


            Ext.Ajax.request({
                url: ApiBaseUrl+'Account/Register',
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                params : Ext.JSON.encode(model),
                success: function(conn, response, options, eOpts) {
                    var result = Ext.JSON.decode(conn.responseText);
                    if (result.success) {
                        Ext.Msg.alert('', "Registered successfully, please login.");
                        G.ShowView('LoginForm');
                    } else {
                        Ext.Msg.alert('', result.message);
                    }
                },
               failure: function(response, request) {

                   G.showGeneralFailure('', response)
                }
            });
        }
    },

    onLogoutTap: function(button, e, eOpts) {
        this.Logout();
    },

    Logout: function() {
        var authStore = Ext.getStore('AuthStore');

        if(authStore.data.items.length === 0)
        {
            G.ShowView('LoginForm');
            return;
        }

        authStore.removeAll();
        authStore.sync({
            success: function () {
                // Erase cookie
                 document.cookie = '.ASPXAUTH'+'=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';

                if(FB.getAccessToken() !== null ){
                    FB.logout();
                }
                var cnt = this;

                Ext.Ajax.request({
                    url: ApiBaseUrl + 'Account/Logoff',
                    success: function () {
                        G.ShowView('LoginForm');
                    },
                    failure: function (response) {
                    }
                });
                //if(!Ext.isEmpty(IN.User) && IN.User.isAuthorized())
                //   IN.User.logout();
            },
            failure: function (batch) {
            }
        });
        // to log out when user enter as visitor
        G.ShowView('LoginForm');
    },

    LoginFunction: function() {

        IsVistor=false;
        var form = G.get('LoginFormItemId');			// Login form
        var values = form.getValues();				// Form values


        var loginModel = values;
        loginModel.RememberMe = false;

        if(loginModel.Email && G.ValidateEmail(loginModel.Email) && loginModel.Password){
            Ext.Ajax.request({
                url: ApiBaseUrl+'Account/Login',
                method: 'POST',
                //headers: { 'Content-Type': 'application/json' },
                params : {Email: loginModel.Email, Password: loginModel.Password, RememberMe: loginModel.RememberMe},
                scope: this,
                success: function(response, options) {
                    var result = G.getResponseData(response);
                    if (result.success) {

                        var authStore = Ext.getStore('AuthStore');
                        var authModel = Ext.create('ProDooMobileApp.model.AuthModel');
                        authModel.data.ResumeId = result.items.ResumeId;
                        authModel.data.Email = result.items.Email;
                        authModel.data.FirstName = result.items.FirstName;
                        authModel.data.LastName = result.items.LastName;
                        authModel.data.UserId = result.items.UserId;
                        authModel.data.IsFreelancer= result.items.IsFreelancer;
                        authModel.data.IsNotificationRead = result.items.IsNotificationRead;
                        authModel.data.AuthType = 0; // without external login
                        authModel.data.IsPasswordChanged=result.items.IsPasswordChanged;
                        authStore.add(authModel);
                        authStore.sync({
                            success: function () {
                                if(result.items.IsPasswordChanged){
                                    G.ShowView('PasswordChangeView');
                                }else{
                                    G.ShowView('StartScreen');
                                    G.setLoggedUsername(result.items.FirstName);
                                }


                            },
                            failure: function (batch) {

                            }
                        });

                    } else {
                        Ext.Msg.alert('', 'Invalid email or password.');
                    }
                },
                failure: function(response, options) {
                   G.showGeneralFailure('', response);
                }
            });
        }
        else{
            Ext.Msg.alert('', 'Please add valid email and password to proceed.');
        }


    }

});