/*
 * File: app/controller/SaveSearch.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ProDooMobileApp.controller.SaveSearch', {
    extend: 'Ext.app.Controller',

    alternateClassName: [
        'SaveSearch',
        'saveName'
    ],

    statics: {
        saveSearchResume: function(directSave, name) {
            // in case of direct create request, no need to validate, just add one search record and pass shortlistid and savedsearcheId to save request method
            var profiles =  G.get('ProfileCnt').items;
            var skills =  G.get('SkillCnt').items;
            var industeries =  G.get('IndustryCnt').items;
            var keywords = G.get('KeywordCnt').items;
            var certifications = G.get('CertificationCnt').items;
            var locationNames = G.get('LocationCnt').items;
            var languageNames = G.get('LanguageCnt').items;

            var hasDirty = false;
            var authStore = Ext.getStore('AuthStore');
            var authRec = authStore.getAt(0);

            var profilesObjs = new Array();
            var skillsObjs = new Array();
            var industeryIds = new Array();
            var keywordIds =  new Array();
            var certificationIds = new Array();
            var locations = new Array();
            var languages = new Array();

            // processing profiles
            if(profiles.items.length > 2){
                profiles.items.forEach(function(item, index){
                    if(index > 1)
                    { profilesObjs.push({'Id' : item.getAt(2).getValue(), 'ExpLevel' : 0}); }
                });
            }

            // processing skills
            if(skills.items.length > 2){
                skills.items.forEach(function(item, index){
                    if(index > 1)
                    { skillsObjs.push({'Id' : item.getAt(2).getValue(), 'ExpLevel' : 0}); }
                });
            }

            // processing industeries
            if(industeries.items.length > 2){
                industeries.items.forEach(function(item, index){

                    if(index > 1)
                    { industeryIds.push({'Id' : item.getAt(2).getValue(), 'ExpLevel' : 0}); }
                });
            }

            // processing keywords
            if(keywords.items.length > 2){
                keywords.items.forEach(function(item, index){
                    if(index > 1)
                    { keywordIds.push({'Id' : item.getAt(2).getValue(), 'ExpLevel' : 0}); }
                });
            }

            // processing certifications
            if(certifications.items.length > 2){
                certifications.items.forEach(function(item, index){
                    if(index > 1)
                    { certificationIds.push({'Id' : item.getAt(2).getValue(), 'ExpLevel' : 0}); }
                });
            }

            // processing locations
            if(locationNames.items.length > 2){
                locationNames.items.forEach(function(item, index){
                    if(index > 1)
                    { locations.push({'Id' : item.getAt(2).getValue(), 'ExpLevel' : 0}); }
                });
            }

            if(languageNames.items.length > 2){
                languageNames.items.forEach(function(item, index){
                    if(index > 1)
                    { languages.push({'Id' : item.getAt(2).getValue(), 'ExpLevel' : 0}); }
                });
            }


            var searchObject = new Object();
            searchObject.Profiles = profilesObjs;
            searchObject.Skills = skillsObjs;
            searchObject.Keywords = keywordIds;
            searchObject.Certifications = certificationIds;
            searchObject.Industries = industeryIds;
            searchObject.UserId = authRec.get('UserId');
            searchObject.Countries = locations;
            searchObject.Languages = languages;

            // if no search cretria set
            if(profilesObjs.length < 1
            && skillsObjs.length < 1
            && keywordIds.length < 1
            && certificationIds.length < 1
            && industeryIds.length < 1
            && locations.length < 1
            && languages.length < 1
            )
            {

                var searchStore = Ext.getStore('SavedSearchStore');
                var loggedUserId =authRec.get('UserId');
                searchStore.clearFilter();
                searchStore.load({
                    params : { userId : loggedUserId
                    },
                    callback : function() {
                        if(Ext.getStore('SavedSearchStore').data.items.length<=0){
                            G.show('SavedSearchSplash');
                            G.hide('SavedList');
                        }
                    }

                });
                G.Push('SavedSearch');
                return;
            }
            else if(!directSave)
            {


                Ext.Msg.confirm('Confirm', Identifier.Title.Notification_ResumeList_SaveBtn, function(btn){
                    if(btn === 'yes'){

                        Ext.defer( function() {
                            Ext.Msg.prompt('Add Search Title', 'Name the search in a way so that you easily can identify it later', function(btn, text, cfg) {

                                if(btn == 'ok' ){
                                    if(Ext.isEmpty(text)) {
                                        Ext.Msg.show(Ext.apply({}, cfg));
                                    }else{
                                        searchObject.SearchName = text;
                                        SaveSearch.SaveSearchParameters(searchObject, directSave);
                                    }
                                }
                            });

                        }, 10 );

                    }
                    else{

                        var searchStore = Ext.getStore('SavedSearchStore');
                        var loggedUserId =authRec.get('UserId');

                        searchStore.load({
                            params : { userId : loggedUserId
                            },
                            callback : function() {
                                if(Ext.getStore('SavedSearchStore').data.items.length<=0){
                                    G.show('SavedSearchSplash');
                                    G.hide('SavedList');
                                }
                            }
                        });
                        G.Push('SavedSearch');


                        return;


                    }
                });
            } // End of confirm box
            else{
                searchObject.SearchName = name;
                SaveSearch.SaveSearchParameters(searchObject, directSave);
            }

        },

        onSavedSearchResumeItemClick: function(dataview, index, target, record, e, eOpts) {

            var savedSearchId = record.data.SavedSearchId;
            if(e.target.className.indexOf('x-button-label')>=0)
            {
                // SaveSearch.removeSearch(record);
                Ext.Ajax.request({
                    url: ApiBaseUrl+'Requests/GetRequestBySaveSearchId?searchId='+savedSearchId,
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' },
                    success: function(conn, response, options, eOpts) {
                        var obj=JSON.parse(conn.responseText);
                        if(obj.total>0){
                            var requestlist='';
                            var ssNo=1;
                            for (i = 0; i < obj.total; i++) {
                                if(i==obj.total-1)
                                requestlist+=ssNo+'. ' +obj.items[i].RequestName;
                                else
                                requestlist+=ssNo+'. ' +obj.items[i].RequestName+'<br>';
                                ssNo++;

                            }
                            Ext.Msg.alert('','This saved search is used in other request(s).'+'<br>'+requestlist+'<br>'+'The Saved Search can only be deleted when no other request(s) are associated with it.');
                        }else{
                            //call search delete functionality
                            SaveSearch.removeSearch(record);
                        }

                    }
                });
            }
            else
            {
                Ext.Ajax.request({
                    url: ApiBaseUrl+'SavedSearches/RetrieveResumeSearch?SavedSearchId='+savedSearchId,
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' },
                    success: function(conn, response, options, eOpts) {
                        var result = Ext.JSON.decode(conn.responseText);
                        if (result.success) {
                            G.Pop();
                            G.Pop();
                            G.Push('SearchResult');
                            if(result.items.Profiles && result.items.Profiles.length > 0){
                                result.items.Profiles.forEach(function(item,index){

                                    SearchResume.createKeywordView('Profile', item.ProfileValue, item.ProfileId);
                                });
                                G.show('ProfileCnt');
                            }
                            if(result.items.Skills && result.items.Skills.length > 0){// if skill btn active
                                result.items.Skills.forEach(function(item,index){

                                    SearchResume.createKeywordView('Skill', item.SkillValue, item.SkillId);
                                });

                                G.show('SkillCnt');
                            }
                            if(result.items.Industeries && result.items.Industeries.length > 0){// if Industry btn active
                                result.items.Industeries.forEach(function(item,index){

                                    SearchResume.createKeywordView('Industry', item.IndustryValue, item.IndustryId);
                                }); G.show('IndustryCnt');
                            }
                            if(result.items.Keywords && result.items.Keywords.length > 0){// if Keyword btn active
                                result.items.Keywords.forEach(function(item,index){

                                    newCnt = SearchResume.createKeywordView('Keyword', item.KeywordValue, item.KeywordId);
                                });
                                G.show('KeywordCnt');
                            }
                            if(result.items.Certifications && result.items.Certifications.length > 0){// if certification btn active
                                result.items.Certifications.forEach(function(item,index){

                                    newCnt = SearchResume.createKeywordView('Certification', item.CertificationValue, item.CertificationId);
                                });
                                G.show('CertificationCnt');
                            }
                            if(result.items.Countries && result.items.Countries.length > 0){
                                result.items.Countries.forEach(function(item,index){

                                    newCnt = SearchResume.createKeywordView('Location', item.CountryName, item.CountryId);
                                });
                                G.show('LocationCnt');
                            }
                            if(result.items.Languages && result.items.Languages.length > 0){
                                result.items.Languages.forEach(function(item,index){

                                    newCnt = SearchResume.createKeywordView('Language', item.LanguageValue, item.LanguageId);
                                });
                                G.show('LanguageCnt');
                            }
                            // enabling profile by default
                            SearchResume.enableDisableItems('Profile');
                        } else {
                            G.showGeneralFailure('', response);
                        }
                    },
                    failure: function(response, request) {
                        //failure catch
                        G.showGeneralFailure('', response);
                    }
                });
            }
        },

        showSaveSearchResumeView: function() {
            var store = Ext.getStore('SavedSearchStore');
            var loggedUserId = Ext.getStore('AuthStore').getAt(0).get('UserId');

            var shortlistStore = Ext.getStore('ShortlistResumeStore');
            store.load({
                params : { userId : loggedUserId
                },
                callback : function() {
                    if(Ext.getStore('SavedSearchStore').data.items.length<=0){
                        G.show('SavedSearchSplash');
                        G.hide('SavedList');
                    }
                }
            });
            // if(G.get('SearchResultSavedScreenId')!==undefined)
            G.Push('SavedSearch');
            // else
            // G.ShowView('SavedSearch');
        },

        SaveSearchParameters: function(dataObject, directSave) {
            Ext.Ajax.request({
                url: ApiBaseUrl+'SavedSearches/SaveResumeSearch',
                method: 'Post',
                headers: { 'Content-Type': 'application/json' },
                params : Ext.JSON.encode(dataObject),
                success: function(conn, response, options, eOpts) {
                    var result = Ext.JSON.decode(conn.responseText);
                    if (result.success)
                    {

                        if(!directSave){
                            if(result.items!==null){
                                var searchStore = Ext.getStore('SavedSearchStore');

                                searchStore.load({
                                    params : { userId : dataObject.UserId
                                    },
                                    callback : function() {
                                        if(Ext.getStore('SavedSearchStore').data.items.length<=0){
                                            G.show('SavedSearchSplash');
                                            G.hide('SavedList');
                                        }
                                    }
                                });
                                G.Push('SavedSearch');
                            }
                            else
                            G.showGeneralFailure('', response);
                        }// end of indirectSave
                        else
                        {
                            G.get('hfSavedSearchId').setValue(result.items.SavedSearchId);
                            Requests.sendRequest();
                        }
                    }
                    else
                    G.showGeneralFailure('', response);
                },
                failure: function(response, request) {
                    G.showGeneralFailure('', response);
                }
            });
        },

        removeSearch: function(record) {

            G.DeleteItem('Search', function(){
                Ext.Ajax.request({
                    url: ApiBaseUrl+'SavedSearches/RemoveSearch',
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' },
                    params : Ext.JSON.encode(record.data),
                    success: function(conn, response, options, eOpts) {

                        var r= JSON.parse(conn.responseText);
                        if(r.success){
                            var savedSearchStore=Ext.getStore("SavedSearchStore");
                            var loggedUserId = Ext.getStore('AuthStore').getAt(0).get('UserId');

                            savedSearchStore.load({

                                params : { userId : loggedUserId
                                },
                                callback : function() {
                                    if(Ext.getStore('SavedSearchStore').data.items.length<=0){
                                        G.show('SavedSearchSplash');
                                        G.hide('SavedList');
                                    }
                                }
                            });
                            Ext.Viewport.setMasked(false);
                        }
                        else
                        Ext.Msg.alert('', r.message,null);
                    },
                    failure: function(response, request) {
                        G.showGeneralFailure('', response)
                    }
                });
            });
        }
    },

    config: {
    }
});