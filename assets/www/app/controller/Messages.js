/*
 * File: app/controller/Messages.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ProDooMobileApp.controller.Messages', {
    extend: 'Ext.app.Controller',
    alias: 'controller.Messages',

    alternateClassName: [
        'Messages'
    ],

    statics: {
        MessagesPropertySearch: function(textfield) {
            var activeLookup = 'UserFirstname';
            var store = Ext.getStore('UserStore');

            store.clearFilter();
            store.filter([
            {
                fn   : function(record) {
                    return record.get(activeLookup).toLowerCase().startsWith(textfield.getValue().toLowerCase());
                },
                scope: this
            }
            ]);
        },

        onMsgAddSearchBtnTap: function() {

            G.hide('MsgAddSearchBtn');
            G.hide('MsgClearSearchIcon');

            var searchField =  G.get('MsgUserField');
            var toField =  G.get('MsgToField');
            var value = searchField.getValue();
            var recordID = G.get('MsgUserSearchRecordID');
            var newCnt;
            var alreadyExist = false;
            var existingRecords = null;


            UsersList.forEach(function(item,index){
                if(recordID.getValue() == item.UserId)
                {
                    alreadyExist=true;
                }
            });


            if (!alreadyExist)
            {
                UsersList.push({UserId:parseInt(recordID.getValue())});

                var val=toField.getValue();
                if (val === "" || val === null)
                { toField.setValue(searchField.getValue().toUpperCase()); }
                else { toField.setValue(val + ", " + searchField.getValue()); }
            }

            searchField.setValue('');
            searchField.setReadOnly();
        },

        onSearchListItemTap: function(dataview,record,e) {
            var selectedElement =  Ext.get(e.target);
            if(selectedElement.hasCls('listResult') || selectedElement.parent().hasCls('listResult')){
                G.show('MsgAddSearchBtn');
                G.show('MsgClearSearchIcon');
                var searchField = G.get('MsgUserField');
                var recordID = G.get('MsgUserSearchRecordID');
                dataview.hide();

                searchField.setValue(record.data.UserFirstname);
                recordID.setValue(record.data.UserId);
                searchField.setReadOnly(true);

            }
        },

        clearSearch: function() {
            G.hide('MsgAddSearchBtn');
            G.hide('MsgClearSearchIcon');
            var searchField = G.get('MsgUserField');
            searchField.setValue('');
            searchField.setReadOnly();
        },

        setActiveBtn: function(button) {
            var TopCont = G.get('topButtons');
            var items =TopCont.items.items;
            for( var i=0; i<items.length; i++){
                items[i].removeCls('activeBtn');
            }
            button.addCls('activeBtn');
        },

        hideAll: function(button) {
            var Cnt = G.get('MsgViewCnt');
            if(Cnt !== null)
            Cnt.removeCls('MsgInboxCnt');
            Cnt.down('#MsgCreateNew').hide();
            Cnt.down('#MsgDetailList').hide();
            Cnt.down('#backBtn').hide();
            Cnt.down('#SendBtn').hide();
            Cnt.down('#EditBtn').hide();
            Cnt.down('#MsgList').hide();
            Cnt.down('#HomeBtn').hide();
            Cnt.down('#searchCnt').hide();
            Cnt.down('#topButtons').hide();
            Cnt.down('#ReplyBtn').hide();
            Cnt.down('#MsgDetailReply').hide();
            Cnt.down('#backPrevScreenBtn').hide();
        },

        searchMessages: function(textfield) {
            var store = Ext.getStore('MessageStore');
            var searchVal = textfield.getValue().toLowerCase();
            store.clearFilter();
            store.filter([
            {
                fn   : function(record) {
                    return record.data.Subject.toLowerCase().indexOf(searchVal) > -1 || record.data.MessageBody.toLowerCase().indexOf(searchVal) > -1;

                },
                scope: this
            }
            ]);
        }
    },

    config: {
        control: {
            "list#MsgList": {
                itemtap: 'onMsgListItemTap'
            },
            "button#InboxBtn": {
                tap: 'onInboxTap'
            },
            "button#SendMsgBtn": {
                tap: 'onSendTap'
            },
            "button#searchBtn": {
                tap: 'onSearchBtnTap'
            },
            "textfield#MsgUserField": {
                focus: 'onMytextfield1Focus',
                keyup: 'onMytextfield1Keyup'
            },
            "button#MsgAddSearchBtn": {
                tap: 'onMsgAddSearchBtnTap'
            },
            "button#MsgClearSearchIcon": {
                tap: 'onMsgClearSearchIconTap1'
            },
            "list#MsgUserSearchList": {
                itemtap: 'onSearchListItemTap1'
            },
            "button#EditBtn": {
                tap: 'onEditBtnTap'
            },
            "button#ReplyBtn": {
                tap: 'onReplyBtnTap'
            },
            "button#HomeBtn": {
                tap: 'onHomeBtnTap'
            },
            "container#MsgViewCnt": {
                painted: 'onMsgViewCntPainted'
            },
            "MsgInbox button#backBtn": {
                tap: 'onBackBtnTap'
            },
            "button#SendBtn": {
                tap: 'onsendBtnTap'
            },
            "MsgInbox button#backPrevScreenBtn": {
                tap: 'onBackPrevScreenBtnTap'
            }
        }
    },

    onMsgListItemTap: function(dataview, index, target, record, e, eOpts) {
        var msgId=null;
        var topBtns = G.get('topButtons');
        var items =  topBtns.items.items;
        items.forEach(function(item,index){
            if (item.element.dom.classList.contains('activeBtn'))
                if(index === 0){
                    isInbox=true;
                    isSent=false;
                }
                else  if(index === 1){
                    isInbox=false;
                    isSent=true;
                }
        });

        if (isInbox)
        { msgId=record.data.UserRequestMessageId; }
        else if (isSent)
        { msgId=record.data.MessageId; }

        var Target = Ext.get(e.target);
        if (Target.parent('.closeIcon'))
        {
            var rec= null;

            if (isInbox)
            { rec= {MessageId:msgId,isDeleteInboxMessage:true}; }
            else if (isSent)
            { rec= {MessageId:msgId,isDeleteSentMessage:true}; }

            Ext.Ajax.request({
                url : ApiBaseUrl+'Message/UpdateMessage/',
                method : 'PUT',
                headers: { 'Content-Type': 'application/json' },
                params : Ext.encode(rec),
                success : function (response) {
                    var responseDecode = Ext.decode(response.responseText);
                    if (responseDecode.success)
                    {
                        var store = Ext.getStore("MessageStore");
                        store.remove(record);
                        Ext.Msg.alert('Info', 'Message deleted successfully!');
                    }
                    else { G.showGeneralFailure(); }

                },
                failure : function (e) {
                    G.showGeneralFailure();
                }
            });
        }
        else if(Target.parent('.requestCnt')){
            if (!record.data.IsRead)
            {
                var rec= {MessageId:msgId,isRead:true};

                Ext.Ajax.request({
                    url : ApiBaseUrl+'Message/UpdateMessage/',
                    method : 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    params : Ext.encode(rec),
                    success : function (response) {
                        var responseDecode = Ext.decode(response.responseText);
                        if (responseDecode.success)
                        {
                            record.data.IsRead = true;

                            G.get("MsgList").refresh();

                            Messages.hideAll();
                            //                     G.hide('MsgCreateNew');
                            G.show('MsgDetailList');
                            //                     G.hide('SendBtn');
                            //                     G.hide('EditBtn');
                            G.show('backBtn');
                            //                     G.hide('HomeBtn');
                            //                     G.hide('searchCnt');
                            //                     G.hide('topButtons');
                            G.show('ReplyBtn');

                            isInbox=true;
                            isSent=false;

                            Ext.query(".msgDetailTitle")[0].innerText=record.data.Subject;
                            Ext.query(".msgDetailMsg")[0].innerText=record.data.MessageBody;
                            Ext.query(".msgDetailUsername")[0].innerText=record.data.UserName;
                            Ext.query(".msgDetailDate")[0].innerText=G.GetSpecificTimePeriod(record.data.DateCreated);
                            Ext.query(".msgDetailTime")[0].innerText=G.GetSpecificTime(record.data.DateCreated);
                        }
                        else { G.showGeneralFailure(); }

                    },
                    failure : function (e) {
                        G.showGeneralFailure();
                    }
                });

            }
            else
            {
                Messages.hideAll();
                //         G.hide('MsgCreateNew');
                G.show('MsgDetailList');
                //         G.hide('MsgInboxList');
                //         G.hide('SendBtn');
                //         G.hide('EditBtn');
                G.show('backBtn');
                G.show('ReplyBtn');


                isInbox=true;
                isSent=false;

                G.get('selectedMsg').data = record;
                Ext.query(".msgDetailTitle")[0].innerText=record.data.Subject;
                Ext.query(".msgDetailMsg")[0].innerText=record.data.MessageBody;
                Ext.query(".msgDetailUsername")[0].innerText=record.data.UserName;
                Ext.query(".msgDetailDate")[0].innerText=G.GetSpecificTimePeriod(record.data.DateCreated);
                Ext.query(".msgDetailTime")[0].innerText=G.GetSpecificTime(record.data.DateCreated);
            }
        }
    },

    onInboxTap: function(button, e, eOpts) {
        Messages.setActiveBtn(button);
        var store=Ext.getStore("MessageStore");
        store.clearFilter();
        store.load({
            params:{isInbox: true}
        });
        G.get("MessageSearchField").reset();
        var Label=G.get('MsgInboxLbl').setHtml('Inbox');
        Label.replaceCls('reqSendIcon','reqInboxIcon');

        if(Ext.getStore('AuthStore').getAt(0).data.IsFreelancer)
        {
            G.show('requestInboxList');
            G.show('invitationLabel');
        }

        G.get('buttonsLabel').setHtml('Inbox');
    },

    onSendTap: function(button, e, eOpts) {
        Messages.setActiveBtn(button);
        var store=Ext.getStore("MessageStore");
        store.clearFilter();
        store.load({
            params:{isInbox: false}
        });
        G.get("MessageSearchField").reset();
        var Label= G.get('MsgInboxLbl').setHtml('Sent');
        Label.replaceCls('reqInboxIcon','reqSendIcon');


        G.hide('requestInboxList');
        G.hide('invitationLabel');

        G.get('buttonsLabel').setHtml('Sent');
    },

    onSearchBtnTap: function(button, e, eOpts) {

        var store=Ext.getStore("MessageStore");
        var topBtns = G.get('topButtons');

        var msgSearchField=G.get("MessageSearchField");
        var val=msgSearchField.getValue();

        if (val !== null && val.trim() !== "")
        {
            var searchVal=val.trim().toLowerCase();
            store.clearFilter();
            store.filterBy(function (record, id) {
                return record.data.Subject.toLowerCase().indexOf(searchVal) > -1 || record.data.MessageBody.toLowerCase().indexOf(searchVal) > -1;
            });
        }
        else
        {
            store.clearFilter();
        }
    },

    onMytextfield1Focus: function(textfield, e, eOpts) {
        if(!textfield.getReadOnly()){
            G.show('MsgUserSearchList');
        }
    },

    onMytextfield1Keyup: function(textfield, e, eOpts) {
        Messages.MessagesPropertySearch(textfield);
    },

    onMsgAddSearchBtnTap: function(button, e, eOpts) {
        Messages.onMsgAddSearchBtnTap();
    },

    onMsgClearSearchIconTap1: function(button, e, eOpts) {
        Messages.clearSearch();
    },

    onSearchListItemTap1: function(dataview, index, target, record, e, eOpts) {
        Messages.onSearchListItemTap(dataview,record,e);
    },

    onEditBtnTap: function(button, e, eOpts) {
        var topBtns = G.get('topButtons');
        var items =  topBtns.items.items;
        items.forEach(function(item,index){
            if (item.element.dom.classList.contains('activeBtn'))
                if(index === 0){
                    isInbox=true;
                    isSent=false;
                }
                else  if(index === 1){
                    isInbox=false;
                    isSent=true;
                }
        });

        Messages.hideAll();

        G.show('MsgCreateNew');
        // G.hide('MsgDetailList');
        G.show('backBtn');
        G.show('SendBtn');
        // G.hide('EditBtn');
        // G.hide('MsgList');
        // G.hide('HomeBtn');
        // G.hide('searchCnt');
        // G.hide('topButtons');

        var str=Ext.getStore("UserStore");
        str.load();

        UsersList=new Array();

        G.hide("MsgAddSearchBtn");
        G.hide("MsgClearSearchIcon");

        G.get("MsgUserField").reset();
        G.get("MsgUserField").setReadOnly();
        G.get("MsgToField").reset();
        G.get("MsgSubjectField").reset();
        G.get("MsgContentField").reset();
    },

    onReplyBtnTap: function(button, e, eOpts) {
        Messages.hideAll();
        var rec = G.get('selectedMsg').data;
        G.show('MsgDetailReply');
        Ext.ComponentQuery.query('#selectedMsgTitle')[0].element.dom.innerText =rec.data.Subject;
        G.get('seletedMsgUsername').element.dom.innerText = rec.data.User.UserFirstname;
        G.get('seletedMsgBody').element.dom.innerText = rec.data.MessageBody;
        Ext.query(".msgDetailDate")[1].innerText=G.GetSpecificTimePeriod(rec.data.DateCreated);
        Ext.query(".msgDetailTime")[1].innerText=G.GetSpecificTime(rec.data.DateCreated);
        G.show('backBtn');
        G.show('SendBtn');
    },

    onHomeBtnTap: function(button, e, eOpts) {
        G.showHomeView();
    },

    onMsgViewCntPainted: function(element, eOpts) {

    },

    onBackBtnTap: function(button, e, eOpts) {
        Messages.hideAll();
        if(G.get('MsgViewCnt') !== null)
            G.get('MsgViewCnt').addCls('MsgInboxCnt');
        // G.hide('MsgCreateNew');
        // G.hide('MsgDetailList');
        G.show('MsgList');
        // G.hide('SendBtn');
        G.show('EditBtn');
        // G.hide('backBtn');
        G.show('HomeBtn');
        G.show('searchCnt');
        G.show('topButtons');
        // G.hide('ReplyBtn');
        // G.hide('MsgDetailReply');
    },

    onsendBtnTap: function(button, e, eOpts) {

        var subject = null;
        var isCreateNew = G.get("MsgDetailList").isHidden();
        var messageBody = null;

        if (isCreateNew)
        {
            messageBody = G.get('MsgContentField').getValue();
            subject = G.get('MsgSubjectField').getValue();
        }
        else { messageBody = G.get('replyMsgArea').getValue(); }


        if (  messageBody !== null && messageBody.trim() !== "")
        {
            var selectedRecord = G.get('selectedMsg').data;
            var record= Ext.create("ProDooMobileApp.model.MsgModel");
            record.data.MessageId=0;
            record.data.UserIds=[];

            if (isCreateNew)
            {
                UsersList.forEach(function(item,index){
                    record.data.UserIds[index]=item.UserId;
                });

                record.data.Subject=subject;
            }
            else
            {
                record.data.Subject=selectedRecord.data.Subject;
                record.data.UserIds.push(selectedRecord.data.User.UserId);
            }

            record.data.MessageBody=messageBody;
            record.data.SenderId=Ext.getStore('AuthStore').data.items[0].data.UserId;

            Ext.Ajax.request({
                url : ApiBaseUrl+'Message/Post',
                method : 'POST',
                headers: { 'Content-Type': 'application/json' },
                params : Ext.encode(record.data),
                success : function (response) {
                    var responseDecode = Ext.decode(response.responseText);
                    if (responseDecode.success)
                    {
                        var store=Ext.getStore("MessageStore");
                        store.clearFilter();
                        store.load({
                            params:{isInbox: isInbox}
                        });

                        Messages.hideAll();
                        G.get('MsgViewCnt').addCls('MsgInboxCnt');
                        //                 G.hide('MsgCreateNew');
                        //                 G.hide('MsgDetailList');
                        G.show('MsgList');
                        //                 G.hide('SendBtn');
                        G.show('EditBtn');
                        //                 G.hide('backBtn');
                        G.show('HomeBtn');
                        G.show('searchCnt');
                        G.show('topButtons');
                        //                 G.hide('ReplyBtn');
                        //                 G.hide('MsgDetailReply');
                    }
                    else { G.showGeneralFailure(); }

                },
                failure : function (e) {
                    G.showGeneralFailure();
                }
            });
        }
        else
        {
            /*if (subject == null || subject.trim() == "")
            { Ext.Msg.alert('Error', 'Please add subject!'); }
            else*/
            if (messageBody === null || messageBody.trim() === "")
            { Ext.Msg.alert('Error', 'Please add message!'); }
        }
    },

    onBackPrevScreenBtnTap: function(button, e, eOpts) {
        G.Pop();
    }

});