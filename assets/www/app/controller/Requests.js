/*
 * File: app/controller/Requests.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ProDooMobileApp.controller.Requests', {
    extend: 'Ext.app.Controller',
    alias: 'controller.Requests',

    alternateClassName: [
        'Requests'
    ],

    statics: {
        createResumeRequest: function(isNew) {
            var form  = G.get('CreateRequestScreen');
            var values = form.getValues();

            if(values.RequestName){
                var model = null;
                var store = Ext.getStore('SearchRequestList');
                store.removeAll(); //Remove if there is something already in store
                model = Ext.create('ProDooMobileApp.model.SearchRequestList');
                //isNew = values.RequestId ==='';
                model.set(values);

                // if(isNew){
                var loggedUserId = Ext.getStore('AuthStore').getAt(0).get('UserId');
                if(values.RequestId ==='')
                model.set('RequestId', 0);
                model.set('UserId',loggedUserId);
                // }

                model.set('Duration', values.Duration[0]);
                model.set('HourlyFee', values.HourlyFee[0]);
                model.set('EndDate', Ext.Date.toString());
                model.set('IsSent', false);

                // if(isNew)
                store.add(model);

                store.sync({
                    success: function () {
                        if(localStorage.SubmitDirectRequest=="true")
                        {
                            G.Pop(); // Pop createrequest view
                            G.Pop(); // Pop search resume view
                            G.Pop(); // pop search reume view
                            Requests.ShowRequestView(true,true, true);
                        }
                        else{
                            G.Pop();
                            Requests.ShowRequestView(false,false);
                        }

                        Ext.Msg.alert('','The request has been saved. You can now manage the request under \'Requests\' as a draft');

                    },
                    failure: function (batch) {
                        //var message = batch.operations[0].request.scope.reader.jsonData["message"];
                        store.load();
                    }
                });
            }
            else
            Ext.Msg.alert('', 'Request title required to proceed');
        },

        sendRequest: function() {
            if(localStorage.SubmitDirectRequest=="true" || G.get('requestList').getSelection()[0]){
                Ext.Msg.confirm('Confirm', 'Do you want to send request invitation?', function(btn){
                    if(btn === 'yes'){
                        var loggedUserId = Ext.getStore('AuthStore').getAt(0).get('UserId');
                        var store = Ext.getStore('SearchRequestList');
                        store.removeAll(); //Remove if there is something already in store

                        if(localStorage.SubmitDirectRequest=="true")
                        {

                            var record  = G.get('resumeDirectRequestData').getData();
                            var shortlistIds= new Array();
                            shortlistIds.push(G.get('hfShortlistId').getValue());
                            record.set('SavedSearchedId',G.get('hfSavedSearchId').getValue());
                            record.set('ShortlistIds', shortlistIds);
                        }
                        else
                        {
                            var record  = G.get('resumeRequestData').getData();
                            var shortlistIds= new Array();
                            shortlistIds.push(G.get('requestList').getSelection()[0].data.ShortlistId);
                            record.set('ShortlistIds',shortlistIds);
                        }

                        record.set('IsSent', true);

                        var model = Ext.create('ProDooMobileApp.model.SearchRequestList');
                        model.set(record.data);


                        store.add(model);
                        store.sync({
                            success: function (result) {


                                if(JSON.parse(result.operations[0]._response.responseText).items==0)
                                Ext.Msg.alert('', JSON.parse(result.operations[0]._response.responseText).message);
                                else{



                                    if(localStorage.SubmitDirectRequest=="true")
                                    {
                                        G.Pop(); // Pop createrequest view
                                        G.Pop(); // Pop search resume view
                                        G.Pop(); // pop search reume view
                                    Requests.ShowRequestView(true,true, true);}
                                    else
                                    {
                                        G.Pop(); // Pop select shortlist view
                                        G.Pop(); // Pop create request view
                                        Requests.ShowRequestView(false,false);
                                    }
                                    Ext.Msg.alert('','Your request has been sent out to the selected resumes.');
                                }
                            },
                            failure: function (batch) {

                                var message = batch.operations[0].request.scope.reader.jsonData["message"];
                                Ext.Msg.alert('', message);

                            },
                            callback:function(x){

                            }
                        });
                    }else{
                        return;
                    }
                });


            }
            else
            Ext.Msg.alert('', 'Please select shortlist to proceed.');
        },

        passModelToSavedSearchList: function() {
            var form  = G.get('CreateRequestScreen');
            var values = form.getValues();

            if(values.RequestName){
                //var model = null;
                var loggedUserId = Ext.getStore('AuthStore').getAt(0).get('UserId');


                var model = Ext.create('ProDooMobileApp.model.SearchRequestList');
                model.set(values);
                model.set('Duration', values.Duration[0]);
                model.set('HourlyFee', values.HourlyFee[0]);
                model.set('EndDate', Ext.Date.toString());
                model.set('IsSent', false);
                model.set('UserId',loggedUserId);

                if(values.RequestId ==='' || values.RequestId ==='0')
                model.set('RequestId', 0);

                if(localStorage.SubmitDirectRequest=="true")
                {
                    Shortlist.onCreateShortlist(values.RequestName+'-shortlist',ResumeIdList);
                    G.get('resumeDirectRequestData').setData(model);
                }
                else{
                    var shortlistStore = Ext.getStore('ShortlistResumeStore');
                    shortlistStore.clearFilter();
                    shortlistStore.load({
                        params : { userId : loggedUserId
                        }
                    });
                    G.Push('SendRequest');
                    G.get('resumeRequestData').setData(model);
                }
                // massign model to send request view
            }
            else
            Ext.Msg.alert('', 'Request title required to proceed');
        },

        requestTopButtonsClick: function(buttonName) {
            var store = Ext.getStore('SearchRequestList');
            var loggedUserId = Ext.getStore('AuthStore').getAt(0).get('UserId');

            store.load({
                params : { userId : loggedUserId,
                    requestType : buttonName
                }
            });
        },

        cloneRequest: function(context) {
            var form = context.up().up();
            var values = form.getValues();
            values.RequestId = '0'; // for cloning
            form.setValues(values);
            var fields = form.getFields();
            fields.Duration.enable();
            fields.StartDate.enable();
            fields.Description.enable();
            fields.LocationId.enable();
            fields.LanguageId.enable();
            fields.HourlyFee.enable();
            fields.Duration.enable();
            fields.FeeCurrencyType.enable();
            fields.DurationType.enable();
            fields.SavedSearchedId.enable();
            Ext.Msg.alert('Status', 'Request cloned successfully');
            G.get('FixRequest').show();
        },

        DeleteRequestResume: function(requestId, requestName, innerView) {
            var requestObject = new Object();

            requestObject.RequestId = requestId;
            requestObject.ResumeId = Ext.getStore('AuthStore').getAt(0).get('ResumeId');
            requestObject.RequestName = requestName;
            var url = ApiBaseUrl+'RequestsResumes/DeleteResumeRequest';

            Ext.Ajax.request({
                url: url,
                method: 'Put',
                headers: { 'Content-Type': 'application/json' },
                params : Ext.JSON.encode(requestObject),
                success: function(conn, response, options, eOpts) {
                    var result = Ext.JSON.decode(conn.responseText);
                    if (result.success) {
                        if(innerView)
                        {
                            G.Pop();
                        }

                        Requests.ShowRequestView(false,false);
                    }
                },
                failure: function(conn, response, options, eOpts) {
                    //failure catch
                    G.showGeneralFailure();
                }
            });
        },

        DeleteRequest: function(requestId, listType) {

            var url = ApiBaseUrl+'Requests/DeleteRequest?requestId='+requestId+'&type='+listType;

            Ext.Ajax.request({
                url: url,
                method: 'Get',
                headers: { 'Content-Type': 'application/json' },
                success: function(conn, response, options, eOpts) {
                    var result = Ext.JSON.decode(conn.responseText);
                    if (result.success)
                    Requests.ShowRequestView(false,false);
                    else
                    Ext.Msg.alert('Not Deleted', result.message);

                },
                failure: function(conn, response, options, eOpts) {
                    //failure catch
                    G.showGeneralFailure();
                }
            });


        },

        TapRequestTitle: function(target, item, record) {

            var savedSearchId=record.data.SavedSearchedId;

            if(target.parent('.closeIcon')){

                Ext.Msg.confirm('Confirm','You want to delete the current request?', function(btn){
                    if(btn === 'yes'){
                        Ext.Msg.confirm('Confirm','Do you want to remove the associated saved search and shortlist as well?', function(btn){
                            if(btn === 'yes'){
                                // ajax call to SS and SL
                                if(item===0){ // Delete Recieved resume request
                                    Requests.DeleteRequestResume(record.data.RequestId, record.data.RequestName, false);
                                } else // Delete draft,sent request
                                {
                                    if(savedSearchId){
                                        Ext.Ajax.request({
                                            url: ApiBaseUrl+'Requests/GetRequestBySaveSearchId?searchId='+savedSearchId,
                                            method: 'GET',
                                            headers: { 'Content-Type': 'application/json' },
                                            success: function(conn, response, options, eOpts) {
                                                var obj=JSON.parse(conn.responseText);
                                                var no=1;
                                                if(obj.total>1){
                                                    var requestlist='';
                                                    for (i = 0; i < obj.total; i++) {
                                                        requestlist+=no+'.'+ obj.items[i].RequestName+'</br>';
                                                        no++;
                                                    }
                                                    Ext.Msg.alert('','The request have saved search which is associated with other request(s).</br>'+requestlist+'The Saved Search can only be deleted when no other request(s) are associated with it.');
                                                    return;
                                                }else{
                                                    //Delete Reqeust and savedSearch
                                                    Ext.Ajax.request({
                                                        url: ApiBaseUrl+'requests/get?requestId='+record.data.RequestId,
                                                        method: 'GET',
                                                        headers: { 'Content-Type': 'application/json' },
                                                        success: function(conn, response, options, eOpts) {
                                                            var obj=JSON.parse(conn.responseText);
                                                            for(var i=0;i<obj.items.ShortLists.length;i++){
                                                                var slId=obj.items.ShortLists[i].ShortlistId;
                                                                var result=Requests.selectShortlist(slId);

                                                                var shortList = {
                                                                    ShortlistId:slId,
                                                                    ShortlistName:"Name"
                                                                };

                                                                if(result){
                                                                    Ext.Ajax.request({
                                                                        url: ApiBaseUrl+'Shortlists/delete',
                                                                        method: 'Delete',
                                                                        params : Ext.JSON.encode(shortList),
                                                                        headers: { 'Content-Type': 'application/json' },
                                                                        success: function(conn, response, options, eOpts) {},
                                                                        failure: function(conn, response, options, eOpts) {G.showGeneralFailure();}
                                                                    });

                                                                }

                                                                Requests.DeleteRequest(record.data.RequestId, item);
                                                            }
                                                        }
                                                    });
                                                }
                                            }
                                        });
                                    }else{
                                        //call search delete functionality
                                        Requests.DeleteRequest(record.data.RequestId, item);
                                    }




                                }

                            }else{
                                //remove only request.
                                Requests.DeleteRequest(record.data.RequestId, item);
                            }
                        });

                    }});


                }
                else if(target.parent('.x-list-item')){

                    if(item===0){// Inbox active
                        // G.ShowView('RequestDetail');
                        G.Push('RequestDetail');
                        var startDate= new Date(record.data.StartDate);

                        G.get("SpanDateDuration").setHtml(startDate.toDateString()+", Duration "+record.data.Duration+" "+record.data.DurationType);
                        G.get("SpanRequestName").setHtml(record.data.RequestName);
                        G.get("HFRequestId").setHtml(record.data.RequestId);
                        G.get("SpanHourlyFee").setHtml(record.data.HourlyFee  +" "+record.data.FeeCurrencyType);
                        if(record.data.Company && record.data.Company.CompanyName)
                        {
                            G.get("SpanCompanyName").setHtml(record.data.Company.CompanyName);
                            var companyStore = Ext.getStore('CompanyDetail');
                            companyStore.clearData();
                            companyStore.add({
                                CompanyName: record.data.Company.CompanyName,
                                CompanyAddress: record.data.Company.CompanyAddress,
                                Phone: record.data.Company.Phone,
                                Detail:record.data.Company.Detail,
                                Logo:record.data.Company.Logo,
                                Vat:record.data.Company.Vat,
                                UserCompanyId:record.data.Company.UserCompanyId,
                            });
                        }
                        else
                        G.get("SpanCompanyName").hide();


                        if(record.data.Description)
                        G.get("SpanDescription").setHtml(record.data.Description);
                        else
                        G.get("SpanDescription").hide();

                        G.get("SpanLanguageLocation").setHtml(record.data.Language.LanguageValue+" "+record.data.Location.CountryName);


                        if(record.data.IsConfirmed){

                            G.get("acceptRequestBtn").hide();
                            G.get("declineRequestBtn").hide();
                            G.get("labelInterestedOrNot").setHtml('Invitation already accepted.');
                        }

                        if(!record.data.IsRead) //Mark message as read
                        {
                            var rec= {RequestId: record.data.RequestId, ResumeId: Ext.getStore('AuthStore').getAt(0).get('ResumeId')};

                            Ext.Ajax.request({
                                url : ApiBaseUrl+'RequestsResumes/MarkNotificationRead/',
                                method : 'PUT',
                                headers: { 'Content-Type': 'application/json' },
                                params : Ext.encode(rec),
                                success : function (response) {
                                    Requests.ShowRequestView();
                                }
                            });

                        }
                    }
                    else{ // Other active

                        var isSentRequest = false;


                        if(item==2) // Sent active
                        isSentRequest = true;


                        G.Push('CreateRequestScreen');
                        var topHeadingLabel =G.get('requestTopHeading');
                        topHeadingLabel.setHtml('Request Details');

                        var form = G.get('CreateRequestScreen');
                        form.setValues(record.data);
                        var fields = form.getFields();

                        // setting from field values
                        fields.StartDate.setValue(new Date(record.data.StartDate));
                        fields.LanguageId.setValue(record.data.Language.LanguageId);
                        fields.LocationId.setValue(record.data.Location.CountryId);

                        SearchResume.onSliderfieldDrag(G.get('feeRangeItemID'));
                        SearchResume.onSliderfieldDrag(G.get('durationItemID'));


                        if(isSentRequest){
                            G.get('DraftRequestBtn').hide();
                            fields.Duration.disable();
                            fields.StartDate.disable();
                            fields.RequestName.disable();
                            fields.Description.disable();
                            fields.LocationId.disable();
                            fields.LanguageId.disable();
                            fields.HourlyFee.disable();
                            fields.Duration.disable();
                            fields.UserCompanyId.disable();
                            fields.FeeCurrencyType.disable();
                            fields.DurationType.disable();
                            fields.SavedSearchedId.disable();
                            G.get('cloneBtn').show();
                            G.get('FixRequest').hide();
                            G.get('SavedResumes').show();
                        }
                        //else
                        //    G.get('DraftRequestBtn').hide();

                    }
                }
        },

        ShowConfirmRequestView: function() {
            Ext.Ajax.request({
                url: ApiBaseUrl+'UserDetail/GetOnlyOne?userId='+Ext.getStore('AuthStore').getAt(0).get('UserId'),
                method: 'Get',
                headers: { 'Content-Type': 'application/json' },

                success: function(conn, response, options, eOpts) {
                    var result = Ext.JSON.decode(conn.responseText);
                    if (result.success) {
                        if(result.items){
                            G.Push('RequestConfirmed');
                            G.get("HfUserDetailId").setValue(result.items.UserDetailId);
                            G.get("presCompanyName").setHtml(G.get('SpanCompanyName').getHtml());
                            G.get("presUserName").setHtml(result.items.UserName);
                            G.get("presDesignation").setHtml(result.items.Position);
                            G.get("presPhone").setHtml(result.items.Phone);
                            G.get("presEmail").setHtml(result.items.Email);
                            G.get("presDesciption").setValue(result.items.Detail);
                            G.get("presentProfileImage").setSrc(result.items.Logo);
                        }
                        else{
                            Ext.Msg.alert('', 'Please first add your contact details in Present menu then proceed. ',null);
                        }
                    }
                },
                failure: function(conn, response, options, eOpts) {
                    if (response.timedout)
                    Ext.Msg.alert('', 'Maximum request time exceeded');
                }
            });
        },

        ConfirmRequestedInvitation: function() {

            var requestId= G.get("HFRequestId").getHtml();
            var userDetailId= G.get("HfUserDetailId").getValue();
            var resumeId = Ext.getStore('AuthStore').getAt(0).get('ResumeId');

            var requestObject = new Object();

            requestObject.RequestId = requestId;
            requestObject.UserDetailId = userDetailId;
            requestObject.CoverLetter=G.get("presDesciption").getValue();
            requestObject.ResumeId = Ext.getStore('AuthStore').getAt(0).get('ResumeId');
            requestObject.RequestName = G.get('SpanRequestName').getHtml();
            var url = ApiBaseUrl+'RequestsResumes/AcceptResumeRequest';

            Ext.Ajax.request({
                url: url,
                method: 'Put',
                headers: { 'Content-Type': 'application/json' },
                params : Ext.JSON.encode(requestObject),
                success: function(conn, response, options, eOpts) {
                    var result = Ext.JSON.decode(conn.responseText);
                    if (result.success) {
                        G.Pop();
                        G.Pop();
                        Requests.ShowRequestView(false,false);
                        //Requests.requestTopButtonsClick('ToMe');
                    }
                },
                failure: function(conn, response, options, eOpts) {
                    //failure catch
                    G.showGeneralFailure();
                }
            });



        },

        ShowRequestView: function(pushView, loadLookup, showHomeButton) {

            var isFreelancer=Ext.getStore('AuthStore').getAt(0).data.IsFreelancer;
            Ext.Ajax.request({
                url: ApiBaseUrl+'requests/GetRequests?isFreelancer='+isFreelancer+'&userId='+Ext.getStore('AuthStore').getAt(0).data.UserId,
                method: 'Get',
                headers: { 'Content-Type': 'application/json' },

                success: function(conn, response, options, eOpts) {

                    var result = Ext.JSON.decode(conn.responseText);
                    if (result.success)
                    {
                        if(pushView) // navigation from home screen
                        G.Push('RequestScreen');

                        if(showHomeButton)
                        {
                            G.hide('requrestBackButton');
                            G.show('requestHomeButton');
                        }

                        if(isFreelancer){
                            var inboxStore = Ext.create('Ext.data.Store', {
                                model:'ProDooMobileApp.model.SearchRequestList',
                                data: result.items.Inbox
                            });
                            G.show('requestInboxList');

                            G.get('requestInboxList').setStore(inboxStore);


                            G.show('invitationLabel');
                            var numberOfItems= result.items.Inbox.length>0? result.items.Inbox.length:1;


                            var declineRequestStore=Ext.create('Ext.data.Store',{
                                model:'ProDooMobileApp.model.SearchRequestList',
                                data:result.items.DeclineRequests
                            });

                            G.show('declineRequestList');
                            G.get('declineRequestList').setStore(declineRequestStore);
                            G.show('declineRequest');


                        }
                        else{
                            var draftStore = Ext.create('Ext.data.Store', {
                                model:'ProDooMobileApp.model.SearchRequestList',
                                data: result.items.Draft
                            });

                            var sentStore = Ext.create('Ext.data.Store', {
                                model:'ProDooMobileApp.model.SearchRequestList',
                                data: result.items.Sent
                            });

                            var draftList= G.get('requestDraftList');
                            var sentList=G.get('requestSendList');

                            if(draftList.isHidden())
                            {
                                draftList.show();// to fix height problem
                                draftList.setStore(draftStore);
                                draftList.hide();
                            }
                            else
                            draftList.setStore(draftStore);

                            if(sentList.isHidden())
                            {
                                sentList.show();// to fix height problem
                                sentList.setStore(sentStore);
                                sentList.hide();
                            }
                            else
                            sentList.setStore(sentStore);


                            if(loadLookup){
                                // Loading Company and Search Store for request detail screen

                                Ext.getStore('CountryStore').load();

                                Ext.getStore('SearchLanguage').load();

                                Ext.getStore('CompanyDetail').load({
                                    params : { userId : Ext.getStore('AuthStore').getAt(0).get('UserId') }
                                });


                                var searchStore = Ext.getStore('SavedSearchStore');
                                searchStore.clearData();
                                searchStore.load({
                                    params : { userId : Ext.getStore('AuthStore').getAt(0).get('UserId')}
                                });
                            }
                        }


                    }
                    else
                    G.showGeneralFailure();
                },
                failure: function(conn, response, options, eOpts) {
                    //failure catch
                    G.showGeneralFailure();
                }
            });
        },

        ShowSavedResumeRequest: function(requestId, type) {
            Ext.Ajax.request({
                url: ApiBaseUrl+'RequestsResumes/GetRequestedResumes?requestId='+requestId,
                method: 'Get',
                headers: { 'Content-Type': 'application/json' },
                success: function(conn, response, options, eOpts) {

                    var result = Ext.JSON.decode(conn.responseText);
                    if (result.success) {
                        if(result.items!==null){
                            var ResultSavedStore  = Ext.getStore('SearchResultSaved');
                            ResultSavedStore.removeAll();
                            //ResultSavedStore.sync();

                            ResultSavedStore.clearFilter(true);
                            if(type==='reqAccepted')
                            ResultSavedStore.filter('IsConfirmed', 'True');
                            if(type==='reqDecline')
                            ResultSavedStore.filter('IsDeleted', 'True');
                            if(type==='reqNoAction'){
                                var noActionFilter = [
                                new Ext.util.Filter({
                                    property: 'IsConfirmed', value: 'false'
                                }),
                                new Ext.util.Filter({
                                    property: "IsDeleted", value: 'false'
                                })
                                ];
                                ResultSavedStore.filter(noActionFilter);
                            }
                            //ResultSavedStore.filter('IsRead', 'False');




                            result.items.forEach(function(item,index){
                                var model = new ProDooMobileApp.model.SearchResultSaved();
                                model.set(item);
                                ResultSavedStore.add(model);
                            });

                            G.Push('SearchResultSavedScreen');
                            G.get('comeFrom').setValue('shortlist');

                            // for shortlist we dont need to show other icons
                            Ext.select('.SrNo').hide();

                            Ext.select('.saveIconDiv').hide();

                            Ext.select('.rightBottomSearchResultButtons').hide();



                            Ext.select('.resultRight').elements.forEach(function(item,index){
                                item.className = 'shortlistResultRight';
                            });
                            // G.get('titleHeader').setData( { Total:shortlistName}).show();

                        }
                        else{
                            Ext.Msg.alert('Status', 'No matched resume found!',null);
                        }
                    } else {

                    }


                },
                failure: function(conn, response, options, eOpts) {
                    //failure catch

                }
            });
        },

        selectShortlist: function(shortlistId) {
            Ext.Ajax.request({
                url: ApiBaseUrl+'requests/GetRequestByShortListId?shortlistId='+shortlistId,
                method: 'GET',
                headers: { 'Content-Type': 'application/json' },
                success: function(conn, response, options, eOpts) {
                    var obj=JSON.parse(conn.responseText);
                    if(obj.total>1){
                        var requestlist='';
                        var slNo=1;
                        for (i = 0; i < obj.total; i++) {
                            if(i==obj.total-1)
                            requestlist+=slNo+'. ' +obj.items[i].RequestName;
                            else
                            requestlist+=slNo+'. ' +obj.items[i].RequestName+'<br>';
                            slNo++;

                        }
                        Ext.Msg.alert('','The request have shortlist which is associated with other request(s).</br>'+requestlist+'</br>The shortlist can only be deleted when no other request(s) are associated with it.');
                        return false;
                    }else{
                        return true;
                    }

                }
            });
        },

        RestoreRequest: function(target, item, record) {
            var requestResumeId=record.data.RequestResumeId;

            Ext.Msg.confirm('Confirm','You want to restore the request?', function(btn){
                if(btn === 'yes'){
                    Ext.Ajax.request({
                        url: ApiBaseUrl+'requests/RestoreRequest?requestResumeId='+requestResumeId,
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        success: function(conn, response, options, eOpts) {
                            Requests.ShowRequestView(false,false,false);

                        }
                    });

                }});


        }
    },

    config: {
    }
});