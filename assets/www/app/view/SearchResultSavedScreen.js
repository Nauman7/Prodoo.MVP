/*
 * File: app/view/SearchResultSavedScreen.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ProDooMobileApp.view.SearchResultSavedScreen', {
    extend: 'Ext.dataview.List',
    alias: 'widget.SearchResultSavedScreen',

    requires: [
        'Ext.Label',
        'Ext.XTemplate',
        'Ext.plugin.ListPaging',
        'Ext.Container',
        'Ext.Button',
        'Ext.field.Hidden'
    ],

    config: {
        itemId: 'SearchResultSavedScreenId',
        store: 'SearchResultSaved',
        cls: [
            'darkBlue',
            'resultSaved'
        ],
        itemTpl: Ext.create('Ext.XTemplate', 
            '',
            ' <div class=\'SavedListCnt rYellow\'>',
            '    ',
            '    <div class="saveIconDiv">',
            '        <span class="SaveIcon"> </span>',
            '    </div>',
            '    <div class="SrNo">{CorrelationScore}',
            '        <span class="downArrow"></span>',
            '    </div>',
            '    <div class="resultRight">',
            '        <div class="resultTitle">{[this.prepareHeading(values.Profiles,"profiles")]}</div>',
            '        <div class="resultLocation">{Region}</div>',
            '        <div class="resultSkill">{[this.prepareHeading(values.Skills,"skills")]}</div>',
            '    </div>',
            '     ',
            '     <span class="closeIcon">',
            '        <span class="x-button-label"> </span>',
            '    </span>',
            '',
            '</div>',
            '<div class="listItems slide-up">',
            '    <tpl for=\'Profiles\'>',
            '        <tpl if="Score &gt; 0">',
            '        <div class="searchDetail">',
            '              <span class="itemNo iGreen">{Score}</span>',
            '            <div class="itemSkill">{ProfileValue}</div>',
            '        </div>',
            '    </tpl> </tpl>',
            '    ',
            '    <tpl for=\'Skills\'>',
            '        <tpl if="Score &gt; 0">',
            '        <div class="searchDetail">',
            '              <span class="itemNo iOrange"> {Score} </span>',
            '            <div class="itemSkill">{SkillValue}</div>',
            '        </div>',
            '       </tpl>',
            '    </tpl>',
            '    ',
            '    ',
            '    <tpl for=\'Certifications\'>',
            '        <tpl if="Score &gt; 0">',
            '        <div class="searchDetail">',
            '              <span class="itemNo iYellow">{Score}</span>',
            '            <div class="itemSkill">{CertificationValue}</div>',
            '        </div>',
            '    </tpl> </tpl>',
            '    ',
            '    <tpl for=\'Keywords\'>',
            '        <tpl if="Score &gt; 0">',
            '        <div class="searchDetail">',
            '              <span class="itemNo iGreen"> {Score}</span>',
            '            <div class="itemSkill">{KeywordValue}</div>',
            '        </div>',
            '             </tpl>',
            '    </tpl>',
            '    ',
            '     <tpl for=\'Industries\'>',
            '         <tpl if="Score &gt; 0">',
            '        <div class="searchDetail">',
            '              <span class="itemNo iYellow"> {Score} </span>',
            '            <div class="itemSkill">{IndustryValue}</div>',
            '        </div>',
            '           </tpl>',
            '    </tpl>',
            '</div>',
            {
                prepareHeading: function(obj, type) {
                    var tempString = '';
                    if(type=='profiles'){
                        if(obj.length>0)
                        tempString = tempString + obj[0].ProfileValue;

                        if(obj.length>1)
                        tempString =  tempString + ', '+obj[1].ProfileValue;
                        return tempString+' ...';
                    }
                    else if(type=='score'){
                        var score=0;

                        if(obj!==null){
                            score=obj;
                        }

                        return score;
                    }

                    else if(type=='totalscore'){
                        var score=0;
                        if(obj.length>0){
                            obj.forEach(function(item, index){
                                if(item.CorrelationScore)
                                score += item.CorrelationScore;
                            });
                        }
                        return score;
                    }

                    else if(type=='resumeScoreClass'){

                        var resumeScoreClass='rYellow;';

                        /*
                        var score=0;
                        if(score>4000)
                        resumeScoreClass='rGreen';
                        else if (score>3000)
                        resumeScoreClass='rOrange';
                        */
                        return resumeScoreClass;
                    }
                    else if(type=='skills'){
                        if(obj.length>0)
                        tempString = tempString + obj[0].SkillValue;

                        if(obj.length>1)
                        tempString =  tempString + ', '+obj[1].SkillValue;
                        if(obj.length>2)
                        tempString =  tempString + ', '+obj[2].SkillValue;
                        return tempString+' ...';
                    }
                }
            }
        ),
        items: [
            {
                xtype: 'label',
                docked: 'top',
                hidden: true,
                itemId: 'titleHeader',
                style: 'color:white;',
                tpl: [
                    '<div>Title : {Total}</div>'
                ]
            },
            {
                xtype: 'container',
                bottom: 10,
                cls: 'paggingCls',
                disabled: true,
                height: 50,
                hidden: true,
                left: 80,
                right: 80
            },
            {
                xtype: 'button',
                cls: [
                    'btnCircle',
                    'helpIcon',
                    'rightBottomSearchResultButtons'
                ],
                docked: 'bottom',
                hidden: true,
                itemId: 'helpBtn',
                text: ' '
            },
            {
                xtype: 'button',
                cls: [
                    'btnCircle',
                    'searchIcon4',
                    'rightBottomSearchResultButtons'
                ],
                docked: 'bottom',
                hidden: true,
                itemId: 'requestBtn',
                text: ' '
            },
            {
                xtype: 'button',
                cls: [
                    'btnCircle',
                    'searchIcon3',
                    'rightBottomSearchResultButtons'
                ],
                docked: 'bottom',
                hidden: true,
                itemId: 'shortlistBtn',
                text: ' '
            },
            {
                xtype: 'button',
                cls: [
                    'btnCircle',
                    'searchIcon2',
                    'rightBottomSearchResultButtons'
                ],
                docked: 'bottom',
                hidden: true,
                itemId: 'savedSearchBtn',
                text: ' '
            },
            {
                xtype: 'button',
                bottom: 10,
                cls: [
                    'btnCircle',
                    'searchIcon1',
                    'rightBottomSearchResultButtons'
                ],
                docked: 'bottom',
                itemId: 'globeBtn',
                right: 10,
                text: ' '
            },
            {
                xtype: 'button',
                cls: [
                    'bigBtnCircle',
                    'searchIconBig',
                    'rightBottomSearchResultButtons'
                ],
                docked: 'bottom',
                hidden: true,
                text: ' '
            },
            {
                xtype: 'button',
                bottom: 10,
                cls: [
                    'btnCircle',
                    'backIcon'
                ],
                docked: 'bottom',
                itemId: 'searchResumeBackBtn',
                left: 10,
                text: ' '
            },
            {
                xtype: 'container',
                cls: [
                    'HelpSRTitle',
                    'HelpCnt'
                ],
                docked: 'top',
                hidden: true,
                itemId: 'HelpCnt',
                items: [
                    {
                        xtype: 'container',
                        cls: 'HelpHeaderCnt',
                        padding: 10,
                        items: [
                            {
                                xtype: 'label',
                                cls: 'left',
                                html: '7',
                                itemId: 'HelpTimer'
                            },
                            {
                                xtype: 'label',
                                cls: 'labelCls',
                                html: 'Resume Summary',
                                itemId: 'HelpHeading'
                            },
                            {
                                xtype: 'button',
                                cls: 'helpClose',
                                hidden: true,
                                itemId: 'HelpClose'
                            }
                        ]
                    },
                    {
                        xtype: 'container',
                        html: 'Brief summary about resume given here',
                        itemId: 'HelpDetail',
                        padding: 10
                    },
                    {
                        xtype: 'hiddenfield',
                        html: ' ',
                        itemId: 'HelpDisable'
                    }
                ]
            },
            {
                xtype: 'hiddenfield',
                itemId: 'comeFrom',
                name: 'comeFrom'
            }
        ],
        plugins: [
            {
                pluginId: 'pagging',
                autoPaging: true,
                type: 'listpaging'
            }
        ],
        listeners: [
            {
                fn: 'onListItemTap',
                event: 'itemtap'
            },
            {
                fn: 'onHelpBtnTap',
                event: 'tap',
                delegate: '#helpBtn'
            },
            {
                fn: 'onRequestBtnTap',
                event: 'tap',
                delegate: '#requestBtn'
            },
            {
                fn: 'onShortlistBtnTap',
                event: 'tap',
                delegate: '#shortlistBtn'
            },
            {
                fn: 'onSavedSearchBtnTap',
                event: 'tap',
                delegate: '#savedSearchBtn'
            },
            {
                fn: 'onglobeBtnTap',
                event: 'tap',
                delegate: '#globeBtn'
            },
            {
                fn: 'onsearchResumeBackBtnTap',
                event: 'tap',
                delegate: '#searchResumeBackBtn'
            },
            {
                fn: 'onHelpCloseTap',
                event: 'tap',
                delegate: '#HelpClose'
            }
        ]
    },

    onListItemTap: function(dataview, index, target, record, e, eOpts) {
        var selectedItem = e.target;
        if(selectedItem.className.indexOf('x-button-label')>=0){
            var store = dataview.getStore();
            store.remove(record);

            Ext.select('.SrNo').elements.forEach(function(item,index){
                Ext.get(item).hide();
            });
            Ext.select('.saveIconDiv').elements.forEach(function(item,index){
                Ext.get(item).hide();
            });

            Ext.select('.resultRight').elements.forEach(function(item,index){
                item.className = 'shortlistResultRight';
            });

        }
        else if(selectedItem.className.indexOf('downArrow')>=0){
            Ext.get(selectedItem).toggleCls('upArrow');
            var detail = Ext.get(Ext.get(selectedItem).parent('.SavedListCnt').dom.nextElementSibling);
            if(detail === null) return; // checking if not null
            detail.toggleCls('slide-down');
            //     var innerEl = detail.children,
            //         elementHeight=0;
            //for(var i=0; i< detail.childElementCount; i++){
            //         elementHeight += innerEl[0].clientHeight * detail.childElementCount;
            //}
            //     var element_classes = (" "+detail.className+" ").replace(/[\n\t\r]/g, " "),
            //         remove_class    = "slide-down",
            //         add_class       = "slide-up",
            //         is_showing      = element_classes.indexOf(" "+remove_class+" ") > -1;

            //     if ( ! is_showing) {
            //         // Switch variable values
            //         remove_class = [add_class, add_class = remove_class][0];
            //         detail.style.maxHeight = elementHeight+'px';
            //     }
            //     else{
            //         detail.style.maxHeight = '0px';
            //     }
            // Remove the previous class (if present) and add the new class
            //     detail.className = (element_classes.replace(" "+remove_class+" ", "") + " "+add_class+" ").trim();
        }

        else if(selectedItem.className.indexOf('SrNo')>=0){
            Ext.get(selectedItem).toggleCls('rightSide');

            if(ResumeIdList.indexOf(record.data.ResumeId)>-1)
            {

                ResumeIdList.splice(ResumeIdList.indexOf(record.data.ResumeId),1);
            }
            else
                ResumeIdList.push(record.data.ResumeId);


        }
        else if(selectedItem.className.indexOf('resultTitle')>=0){
            // adding record to detial resume store
            var store = Ext.getStore('SearchResultDetail');
            var records = store.getRange();
            store.remove(records);

            store.add(record);
            store.sync();
            G.Push('SearchResumeDetail');
            if(G.get('comeFrom').getValue()==='shortlist'){
              G.get('shortlistResume').hide();
            }
            if(IsVistor)
                G.hide('shortlistResume');

        }
        else if(!IsVistor && selectedItem.className.indexOf('SaveIcon')> -1){
           Shortlist.DirectShortListIconClick();
        }
    },

    onHelpBtnTap: function(button, e, eOpts) {
        if(button.element.hasCls('activeBtn')){
            this.stopCount();
            this.down('#HelpCnt').hide();
            button.removeCls('activeBtn');
        }
        else{
            var HelpCnt = this.down('#HelpCnt');
            HelpCnt.addCls('HelpSRTitle');
            HelpCnt.removeCls('HelpSrNo');
            HelpCnt.removeCls('HelpSRShortlistIcon');
            HelpCnt.removeCls('HelpSRDownArrow');
            HelpCnt.removeCls('HelpSRSkill');
            Ext.get(Ext.query('.SrNo')[0]).removeCls('rightSide');
            this.down('#HelpHeading').setHtml('Resume Summary');
            this.down('#HelpDetail').setHtml('Brief summary about resume given here');

            this.startCount();
            HelpCnt.show();
            button.addCls('activeBtn');
        }

        if(IsVistor)
            Ext.select('.helpIcon').addCls('bottom78');

    },

    onRequestBtnTap: function(button, e, eOpts) {
        if(ResumeIdList && ResumeIdList.length>0){

            Ext.Msg.confirm('', 'You have selected '+ResumeIdList.length+' resumes and clicked the request button to create a quick request. In the next screen you need to choose a title for the request to make it easy for you to find it later. When you save the quick request it will be saved with the current search parameters as your associated search and your selected resumes as you associated shortlist.', function(btn){
                if(btn === 'yes'){

            G.Push('CreateRequestScreen');

            G.get('DraftRequestBtn').hide(); // dont need draft icon

            var saveSearchDD= G.get('fieldSavedSearchedId');
            saveSearchDD.disable();
            saveSearchDD.setPlaceHolder("Current Search");

            localStorage.SubmitDirectRequest=true;


            var loggedUserId = Ext.getStore('AuthStore').getAt(0).get('UserId');

            var companyStore = Ext.getStore('CompanyDetail');
            companyStore.clearData();
            companyStore.load({
                params : { userId : loggedUserId
                         }
            });

                }
                else{
                    Requests.ShowRequestView(true,true);
                }
            });
        }
        else
            Requests.ShowRequestView(true,true);
    },

    onShortlistBtnTap: function(button, e, eOpts) {

        Shortlist.DirectShortListIconClick();
    },

    onSavedSearchBtnTap: function(button, e, eOpts) {
        SaveSearch.showSaveSearchResumeView();
    },

    onglobeBtnTap: function(button, e, eOpts) {
        SearchResume.onGlobeBtnTap(this,button);
    },

    onsearchResumeBackBtnTap: function(button, e, eOpts) {
        //Or G.ShowView('SearchResult'); //OR
        G.Pop();
        // var view =  G.get('searchResultView');
        // Ext.Viewport.setActiveItem(view);
    },

    onHelpCloseTap: function(button, e, eOpts) {
        this.stopCount();
        this.down('#HelpCnt').hide();
    },

    HelpTimer: function() {
        HelpCounter = 7;
        HelpTimer = 0;
        HelpTimerOn = 0;
    },

    startCount: function() {
        if (!HelpTimerOn) {
            HelpTimerOn = 1;
            this.timedCount();
        }
    },

    timedCount: function() {
        if(HelpCounter<=0){
            this.stopCount();
            this.HelpUpdate();
            return;
        }
        else{
            G.get('HelpTimer').setHtml(HelpCounter);
            HelpCounter = HelpCounter - 1;
            HelpTimer = setTimeout(function(){ G.get('SearchResultSavedScreenId').timedCount(); }, 1000);
        }

    },

    stopCount: function() {
        clearTimeout(HelpTimer);
        HelpCounter = 7;
        HelpTimer = 0;
        HelpTimerOn = 0;
    },

    HelpUpdate: function() {
        var HelpCnt = this.down('#HelpCnt');
        if(HelpCnt.element.hasCls('HelpSRTitle')){
            HelpCnt.removeCls('HelpSRTitle');
            HelpCnt.addCls('HelpSrNo');
            Ext.get(Ext.query('.SrNo')[0]).addCls('rightSide');
            this.down('#HelpHeading').setHtml('Score');
            this.down('#HelpDetail').setHtml('Resumes are sorted by score');
        }
        else if(HelpCnt.element.hasCls('HelpSrNo')){
            HelpCnt.removeCls('HelpSrNo');
            HelpCnt.addCls('HelpSRShortlistIcon');
            this.down('#HelpHeading').setHtml('Shortlist button');
            this.down('#HelpDetail').setHtml('Tap to add resume in your shortlist');
        }
        else if(HelpCnt.element.hasCls('HelpSRShortlistIcon')){
            HelpCnt.removeCls('HelpSRShortlistIcon');
            HelpCnt.addCls('HelpSRDownArrow');
            this.down('#HelpHeading').setHtml('Expand button');
            this.down('#HelpDetail').setHtml('You can see the detail that are used to calculate the score by tap on the expand button here');
        }
        else if(HelpCnt.element.hasCls('HelpSRDownArrow')){
            HelpCnt.removeCls('HelpSRDownArrow');
            HelpCnt.addCls('HelpSRSkill');

            Ext.get(Ext.query('.downArrow')[0]).addCls('upArrow');
            Ext.get(Ext.query('.listItems')[0]).addCls('slide-down');

            this.down('#HelpHeading').setHtml('Skill Detail');
            this.down('#HelpDetail').setHtml('The detail contains the search parameters and the associated score ');
        }
        else{
            this.down('#HelpCnt').hide();
            return;
        }
        this.startCount();
    },

    initialize: function() {
        this.callParent();
        this.HelpTimer();
        ResumeIdList= new Array();
    }

});