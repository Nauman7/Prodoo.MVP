/*
 * File: app/view/RequestScreen.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ProDooMobileApp.view.RequestScreen', {
    extend: 'Ext.Container',
    alias: 'widget.RequestScreen',

    requires: [
        'Ext.Button',
        'Ext.Label',
        'Ext.field.Search',
        'Ext.dataview.List',
        'Ext.XTemplate'
    ],

    config: {
        cls: 'RequestScreen',
        itemId: 'RequestScreen',
        padding: '0 0 90 0',
        scrollable: true,
        items: [
            {
                xtype: 'container',
                docked: 'top',
                itemId: 'topButtons',
                margin: '10 0 0 0',
                layout: {
                    type: 'hbox',
                    align: 'start',
                    pack: 'center'
                },
                items: [
                    {
                        xtype: 'button',
                        cls: [
                            'sendRequestBtn',
                            'activeBtn'
                        ],
                        itemId: 'SendRequestBtn',
                        margin: '0 5'
                    },
                    {
                        xtype: 'button',
                        cls: 'draftBtn',
                        itemId: 'draftBtn',
                        margin: '0 5',
                        text: ' '
                    }
                ]
            },
            {
                xtype: 'label',
                cls: 'RequestLabel',
                docked: 'top',
                html: 'Sent',
                itemId: 'buttonsLabel'
            },
            {
                xtype: 'container',
                cls: 'searchViewCnt',
                docked: 'top',
                hidden: false,
                items: [
                    {
                        xtype: 'button',
                        cls: 'searchBtn',
                        itemId: 'searchBtn'
                    },
                    {
                        xtype: 'searchfield',
                        cls: 'searchRound',
                        itemId: 'mysearchfield',
                        clearIcon: false,
                        placeHolder: 'Search request'
                    }
                ]
            },
            {
                xtype: 'label',
                cls: [
                    'reqHead',
                    'reqSendIcon'
                ],
                hidden: true,
                html: 'Sent',
                itemId: 'mylabel5',
                listeners: [
                    {
                        fn: function(component, eOpts) {
                            component.element.on('tap',function(){
                                if(this.hasCls('collapseActive')){
                                    this.next().show();
                                }
                                else{
                                    this.next().hide();
                                }
                                this.toggleCls('collapseActive');
                            });
                        },
                        event: 'initialize'
                    }
                ]
            },
            {
                xtype: 'list',
                scrollable: false,
                cls: 'requestListView',
                hidden: false,
                itemId: 'requestSendList',
                emptyText: 'No record found',
                itemTpl: [
                    '<div class="requestListCnt">',
                    '    <span class="reqListNo">{RequestId}</span>',
                    '    <span class="reqListName">{RequestName}</span>',
                    '    <span class="closeIcon">',
                    '        <span class="x-button-label"> </span>',
                    '    </span>',
                    '</div>'
                ],
                loadingText: false,
                pressedCls: '',
                selectedCls: '',
                listeners: [
                    {
                        fn: function(component, eOpts) {
                            G.get('RequestScreen').AdjustListHeight(component);

                            // this.AdjustListHeight(component);
                            // component.on('refresh',function(){
                            //     this.setHeight(null);
                            //     var ViewHeight = Ext.get(this.element.query('.x-scroll-scroller')[0]).getHeight();
                            //     if(ViewHeight > 10)
                            //         this.setHeight(ViewHeight);

                            // });
                        },
                        single: true,
                        event: 'initialize'
                    }
                ]
            },
            {
                xtype: 'label',
                cls: [
                    'reqHead',
                    'reqDraftIcon'
                ],
                hidden: true,
                html: 'Draft',
                itemId: 'mylabel4',
                listeners: [
                    {
                        fn: function(component, eOpts) {
                            component.element.on('tap',function(){
                                if(this.hasCls('collapseActive')){
                                    this.next().show();
                                }
                                else{
                                    this.next().hide();
                                }
                                this.toggleCls('collapseActive');
                            });
                        },
                        event: 'initialize'
                    }
                ]
            },
            {
                xtype: 'list',
                scrollable: false,
                cls: 'requestListView',
                hidden: true,
                itemId: 'requestDraftList',
                emptyText: 'No record found',
                itemTpl: [
                    '<div class="requestListCnt">',
                    '    <span class="reqListNo">{RequestId}</span>',
                    '    <span class="reqListName">{RequestName}</span>',
                    '    <span class="closeIcon">',
                    '        <span class="x-button-label"> </span>',
                    '    </span>',
                    '</div>'
                ],
                loadingText: false,
                pressedCls: '',
                selectedCls: '',
                listeners: [
                    {
                        fn: function(component, eOpts) {
                            G.get('RequestScreen').AdjustListHeight(component);
                            // this.AdjustListHeight(component);
                            // component.on('refresh',function(){
                            //     this.setHeight(null);
                            //     var ViewHeight = Ext.get(this.element.query('.x-scroll-scroller')[0]).getHeight();
                            //     if(ViewHeight > 10)
                            //         this.setHeight(ViewHeight);
                            // });
                        },
                        single: true,
                        event: 'initialize'
                    }
                ]
            },
            {
                xtype: 'button',
                cls: 'requestBtn',
                docked: 'bottom',
                hidden: true,
                itemId: 'requestBtn',
                text: ' '
            },
            {
                xtype: 'button',
                cls: [
                    'homeIcon',
                    'btnCircle'
                ],
                docked: 'bottom',
                itemId: 'mybutton6',
                text: ' '
            },
            {
                xtype: 'button',
                cls: 'addBtn',
                docked: 'bottom',
                itemId: 'AddBtn',
                text: ' '
            }
        ],
        listeners: [
            {
                fn: 'onSendRequestBtnTap',
                event: 'tap',
                delegate: '#SendRequestBtn'
            },
            {
                fn: 'onDraftBtnTap',
                event: 'tap',
                delegate: '#draftBtn'
            },
            {
                fn: 'onMysearchfieldKeyup',
                event: 'keyup',
                delegate: '#mysearchfield'
            },
            {
                fn: 'onrequestListTap111',
                event: 'itemtap',
                delegate: '#requestSendList'
            },
            {
                fn: 'onrequestListTap11',
                event: 'itemtap',
                delegate: '#requestDraftList'
            },
            {
                fn: 'onRequestDraftListShow',
                event: 'show',
                delegate: '#requestDraftList'
            },
            {
                fn: 'onHomeBtnTap',
                event: 'tap',
                delegate: '#mybutton6'
            },
            {
                fn: 'onAddBtnTap',
                event: 'tap',
                delegate: '#AddBtn'
            }
        ]
    },

    onSendRequestBtnTap: function(button, e, eOpts) {
        this.setActiveBtn(button);
        this.hideAll();
        G.show('requestSendList');
        G.get('buttonsLabel').setHtml('Sent');
    },

    onDraftBtnTap: function(button, e, eOpts) {
        this.setActiveBtn(button);
        this.hideAll();
        G.show('requestDraftList');
        G.get('buttonsLabel').setHtml('Draft');
    },

    onMysearchfieldKeyup: function(textfield, e, eOpts) {
        var store = Ext.getStore('SearchRequestList');
        store.clearFilter();

        store.filter([
            {
                fn   : function(record) {
                    return record.get('RequestName').toLowerCase().indexOf(textfield.getValue().toLowerCase())>-1;
                },
                scope: this
            }
        ]);
    },

    onrequestListTap111: function(dataview, index, target, record, e, eOpts) {
        var target =  Ext.get(e.target);

        Requests.TapRequestTitle(target, 2, record);

    },

    onrequestListTap11: function(dataview, index, target, record, e, eOpts) {
        var target =  Ext.get(e.target);

        Requests.TapRequestTitle(target, 1, record);

    },

    onRequestDraftListShow: function(component, eOpts) {
        G.get('RequestScreen').AdjustListHeight(component);
    },

    onHomeBtnTap: function(button, e, eOpts) {
        G.showHomeView();
    },

    onAddBtnTap: function(button, e, eOpts) {
        localStorage.SubmitDirectRequest=false;
        G.Push('CreateRequestScreen');

    },

    setActiveBtn: function(button) {
        var TopCont = this.down('#topButtons');
        var items =TopCont.items.items;
        for( var i=0; i<items.length; i++){
            items[i].removeCls('activeBtn');
        }
        button.addCls('activeBtn');
    },

    hideAll: function() {
        G.hide('requestDraftList');
        G.hide('requestSendList');
    },

    getActiveBtn: function() {
        var topBtnItems = this.down('#topButtons').innerItems;
        for(var i=0; i< topBtnItems.length; i++){
            if(topBtnItems[i].element.dom.className.indexOf('activeBtn') >= 0){
                return i;
            }
        }
    },

    AdjustListHeight: function(component) {
        component.on('refresh',function(){
            this.setHeight(null);
            var ViewHeight = Ext.get(this.element.query('.x-scroll-scroller')[0]).getHeight();
            if(ViewHeight > 10)
                this.setHeight(ViewHeight);
        });
    }

});